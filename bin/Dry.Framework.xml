<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dry.Framework</name>
    </assembly>
    <members>
        <member name="T:Dry.Framework.Attributes.DatabaseColumnAttribute">
            <summary>The DatabaseColumnAttribute for Entity Class Properties</summary>
        </member>
        <member name="F:Dry.Framework.Attributes.DatabaseColumnAttribute.FieldName">
            <summary>Column Name in database</summary>
        </member>
        <member name="F:Dry.Framework.Attributes.DatabaseColumnAttribute.DisplayName">
            <summary>Column Name for display</summary>
        </member>
        <member name="F:Dry.Framework.Attributes.DatabaseColumnAttribute.DefaultValue">
            <summary>The Default Value for the column if any</summary>
        </member>
        <member name="F:Dry.Framework.Attributes.DatabaseColumnAttribute.Description">
            <summary>Description</summary>
        </member>
        <member name="P:Dry.Framework.Attributes.DatabaseColumnAttribute.DataType">
            <summary>Column Data Type from database</summary>
        </member>
        <member name="F:Dry.Framework.Attributes.DatabaseColumnAttribute.Precision">
            <summary>
            The maximum total number of decimal digits that will be stored, both to the left and to the right of the decimal point. The precision must be a value from 1 through the maximum precision of 38. 
            </summary>
        </member>
        <member name="F:Dry.Framework.Attributes.DatabaseColumnAttribute.Length">
            <summary>
            The length of the string or for numbers: the number of decimal digits that will be stored to the right of the decimal point. This number is substracted from p to determine the maximum number of digits to the left of the decimal point.
            </summary>
        </member>
        <member name="F:Dry.Framework.Attributes.DatabaseColumnAttribute.IsComputed">
            <summary>
            Is the column a computed column
            </summary>
        </member>
        <member name="F:Dry.Framework.Attributes.DatabaseColumnAttribute.IsNullable">
            <summary>
            Does the column accept nulls
            </summary>
        </member>
        <member name="F:Dry.Framework.Attributes.DatabaseColumnAttribute.IsPrimaryKeyAuto">
            <summary>
            Is the column a primary key Autonumber
            </summary>
        </member>
        <member name="F:Dry.Framework.Attributes.DatabaseColumnAttribute.IsUnique">
            <summary>Is this field part of a Unique Constraint</summary>
        </member>
        <member name="P:Dry.Framework.Attributes.DatabaseColumnAttribute.eType">
            <summary>Enumerated Data Type</summary>
        </member>
        <member name="F:Dry.Framework.Attributes.DatabaseColumnAttribute.Index">
            <summary>Index</summary>
        </member>
        <member name="M:Dry.Framework.Attributes.DatabaseColumnAttribute.#ctor">
            <summary>Initializes a new instance of the DatabaseColumnAttribute.</summary>
        </member>
        <member name="M:Dry.Framework.Attributes.DatabaseColumnAttribute.#ctor(Dry.Framework.Attributes.DatabaseColumnAttribute)">
            <summary>Memberwise copy constructor</summary>
            <param name="pDCA">dca to copy</param>
        </member>
        <member name="M:Dry.Framework.Attributes.DatabaseColumnAttribute.#ctor(System.Data.DataRow)">
            <summary>Instantiates the column attribute from a datarow obtained from Info_GetFieldDT(...,1) or Info_GetStoredProcedureParamsDT(...)</summary>
            <param name="dr">Row from one of the two methods: Info_GetFieldDT(...,1) or Info_GetStoredProcedureParamsDT(...)</param>
        </member>
        <member name="M:Dry.Framework.Attributes.DatabaseColumnAttribute.CompareTo(System.Object)">
            <summary>Compares objects</summary>
        </member>
        <member name="M:Dry.Framework.Attributes.DatabaseColumnAttribute.ToAttributeString(System.Boolean)">
            <summary>Builds a string to prepend the property declaration</summary>
            <param name="ynHardCodeValues">True if you want the length in the attribute, false if you want the private variable name instead</param>
        </member>
        <member name="M:Dry.Framework.Attributes.DatabaseColumnAttribute.C39">
            <summary>Returns a Char(39) (') if the type would need to be wrapped with on in a sql statement.</summary>
        </member>
        <member name="T:Dry.Framework.Attributes.TableFieldAttribute">
            <summary>Specify a Table name and a field name for an enum value</summary>
        </member>
        <member name="P:Dry.Framework.Attributes.TableFieldAttribute.TableName">
            <summary>Table Name</summary>
        </member>
        <member name="P:Dry.Framework.Attributes.TableFieldAttribute.FieldName">
            <summary>Field Name</summary>
        </member>
        <member name="M:Dry.Framework.Attributes.TableFieldAttribute.#ctor(System.String,System.String)">
            <summary>Constructor to specify a Table name and a field name for the given enum</summary>
        </member>
        <member name="T:Dry.Framework.CodeRunner.SeeSharpCompiler">
            <summary>C# Compiler Class</summary>
        </member>
        <member name="P:Dry.Framework.CodeRunner.SeeSharpCompiler.CompilerErrors">
            <summary>Compile Errors</summary>
        </member>
        <member name="P:Dry.Framework.CodeRunner.SeeSharpCompiler.CompilerReferances">
            <summary>Fullpath and filenames of DLL Referances</summary>
        </member>
        <member name="M:Dry.Framework.CodeRunner.SeeSharpCompiler.#ctor">
            <summary>Constructors</summary>
        </member>
        <member name="M:Dry.Framework.CodeRunner.SeeSharpCompiler.#ctor(System.Collections.Generic.List{System.String})">
            <summary>Constructors</summary>
        </member>
        <member name="M:Dry.Framework.CodeRunner.SeeSharpCompiler.CreateClass(System.String,System.String,System.Boolean)">
            <summary>Create the class from text</summary>
        </member>
        <member name="M:Dry.Framework.CodeRunner.SeeSharpCompiler.CreateAssembly(System.String,System.Boolean)">
            <summary>create the assembly</summary>
        </member>
        <member name="M:Dry.Framework.CodeRunner.SeeSharpCompiler.CreateAssemblyObject(System.String,System.String,System.Object[])">
            <summary>
            Creates an Object from the given code and referenced assemblies
            </summary>
            <param name="strFullObjectName">Fully qulaified path of the Object to create an instance of</param>
            <param name="csCode">Code to Compile</param>
            <param name="ConstructorArguments">An array of type Object containing the arguments to be passed to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to be invoked. If the default constructor is desired, args must be an empty array or Nothing (null).</param>
            <returns>Returns an instantiated object from Assembly.CreateInstance</returns>
        </member>
        <member name="M:Dry.Framework.CodeRunner.SeeSharpCompiler.Eval(System.String,System.Boolean,System.String,System.String)">
            <summary>Evaluate</summary>
        </member>
        <member name="M:Dry.Framework.CodeRunner.SeeSharpCompiler.ExecuteCode(System.String,System.Boolean)">
            <summary>Execute some C# code</summary>
        </member>
        <member name="M:Dry.Framework.CodeRunner.SeeSharpCompiler.GetPropertyAutomationCode(System.String,System.Boolean)">
            <summary>untested</summary>
        </member>
        <member name="M:Dry.Framework.CodeRunner.SeeSharpCompiler.GetSampleCode">
            <summary>Sample</summary>
        </member>
        <member name="T:Dry.Framework.Delegates.RecordsFoundDelegate">
            <summary>Signifies that records were found.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">a RecordsFoundEventArgs that contains the records found</param>
        </member>
        <member name="T:Dry.Framework.Delegates.FYIDelegate">
            <summary>Signifies that something happened.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">an FYIEventArgs that contains the Information</param>
        </member>
        <member name="T:Dry.Framework.Delegates.InternalErrorDelegate">
            <summary>Signifies that an error has occured and no action was taken, thus giving you the oppurtunity to handle it</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">an InternalErrorEventArgs that contains the error</param>
        </member>
        <member name="T:Dry.Framework.Delegates.ProgressReportDelegate">
            <summary>Reports on progress</summary>
            <param name="intTotal">Total items</param>
            <param name="intCurrent">Corrent Item index</param>
        </member>
        <member name="T:Dry.Framework.TransactionStates">
            <summary>Transaction states of a connection object</summary>
        </member>
        <member name="F:Dry.Framework.TransactionStates.TransNone">
            <summary>Not in a transaction</summary>
        </member>
        <member name="F:Dry.Framework.TransactionStates.TransInProcess">
            <summary>Transaction is in process</summary>
        </member>
        <member name="F:Dry.Framework.TransactionStates.TransCommited">
            <summary>Transaction is Committed</summary>
        </member>
        <member name="F:Dry.Framework.TransactionStates.TransRolledBack">
            <summary>Transaction is RolledBack</summary>
        </member>
        <member name="T:Dry.Framework.DatabaseObjectType">
            <summary>Describes the type of Database object</summary>
        </member>
        <member name="F:Dry.Framework.DatabaseObjectType.IsUnknown">
            <summary>Is Unknown</summary>
        </member>
        <member name="F:Dry.Framework.DatabaseObjectType.IsATable">
            <summary>Is A Table</summary>
        </member>
        <member name="F:Dry.Framework.DatabaseObjectType.IsAProcedure">
            <summary>Is A Procedure</summary>
        </member>
        <member name="F:Dry.Framework.DatabaseObjectType.IsAView">
            <summary>Is A View</summary>
        </member>
        <member name="F:Dry.Framework.DatabaseObjectType.IsAFunction">
            <summary>Is A Function</summary>
        </member>
        <member name="F:Dry.Framework.DatabaseObjectType.IsASynonym">
            <summary>Is A Synonym</summary>
        </member>
        <member name="F:Dry.Framework.DatabaseObjectType.IsAPrimaryKey">
            <summary>Is A Primary Key</summary>
        </member>
        <member name="F:Dry.Framework.DatabaseObjectType.IsAForeignKey">
            <summary>Is A Foreign Key</summary>
        </member>
        <member name="F:Dry.Framework.DatabaseObjectType.IsADefault">
            <summary>Is A Default</summary>
        </member>
        <member name="F:Dry.Framework.DatabaseObjectType.IsATrigger">
            <summary>Is A Trigger</summary>
        </member>
        <member name="T:Dry.Framework.StandardTypes">
            <summary>Standard type enumeration</summary>
        </member>
        <member name="F:Dry.Framework.StandardTypes.CharType">
            <summary>char</summary>
        </member>
        <member name="F:Dry.Framework.StandardTypes.VarCharType">
            <summary>varchar</summary>
        </member>
        <member name="F:Dry.Framework.StandardTypes.IntType">
            <summary>int</summary>
        </member>
        <member name="F:Dry.Framework.StandardTypes.DateTimeType">
            <summary>datetime</summary>
        </member>
        <member name="F:Dry.Framework.StandardTypes.MoneyType">
            <summary>money</summary>
        </member>
        <member name="F:Dry.Framework.StandardTypes.BitType">
            <summary>bit</summary>
        </member>
        <member name="F:Dry.Framework.StandardTypes.GuidType">
            <summary>uniqueidentifier</summary>
        </member>
        <member name="F:Dry.Framework.StandardTypes.BinaryType">
            <summary>binary</summary>
        </member>
        <member name="T:Dry.Framework.GenerationFormatType">
            <summary>Generation Format Type</summary>
        </member>
        <member name="F:Dry.Framework.GenerationFormatType.ForDotNet">
            <summary>Generate code for .Net</summary>
        </member>
        <member name="F:Dry.Framework.GenerationFormatType.ForSQL">
            <summary>Generate code for SQL</summary>
        </member>
        <member name="T:Dry.Framework.Handling">
            <summary>Handling tells you the state of handlation</summary>
        </member>
        <member name="F:Dry.Framework.Handling.IsHandled">
            <summary>Informing you that it is handled</summary>
        </member>
        <member name="F:Dry.Framework.Handling.IsHandledUnlessYouHandled">
            <summary>Informing you that it is handled unless you handled it and report back</summary>
        </member>
        <member name="F:Dry.Framework.Handling.IsHandledByYou">
            <summary>Informing you that it is only handled if you handle it</summary>
        </member>
        <member name="T:Dry.Framework.AlterationState">
            <summary>Determins the state of alteration</summary>
        </member>
        <member name="F:Dry.Framework.AlterationState.Unchanged">
            <summary>The record was found and has not changed</summary>
        </member>
        <member name="F:Dry.Framework.AlterationState.InsertRecord">
            <summary>The record needs to be inserted</summary>
        </member>
        <member name="F:Dry.Framework.AlterationState.UpdateRecord">
            <summary>The record has changed and needs to be updated</summary>
        </member>
        <member name="F:Dry.Framework.AlterationState.DeleteRecord">
            <summary>The record is no longer present</summary>
        </member>
        <member name="T:Dry.Framework.AuthorizationState">
            <summary>State of Authorization</summary>
        </member>
        <member name="F:Dry.Framework.AuthorizationState.Pending">
            <summary>Authorization is Pending</summary>
        </member>
        <member name="F:Dry.Framework.AuthorizationState.Authorized">
            <summary>Authorization is Authorized</summary>
        </member>
        <member name="F:Dry.Framework.AuthorizationState.Captured">
            <summary>Authorization is Captured</summary>
        </member>
        <member name="F:Dry.Framework.AuthorizationState.PartiallyCaptured">
            <summary>Authorization is Partially Captured</summary>
        </member>
        <member name="F:Dry.Framework.AuthorizationState.Expired">
            <summary>Authorization has Expired</summary>
        </member>
        <member name="F:Dry.Framework.AuthorizationState.Voided">
            <summary>Authorization is Voided</summary>
        </member>
        <member name="T:Dry.Framework.Extentions">
            <summary>Enumeration Extentions</summary>
        </member>
        <member name="M:Dry.Framework.Extentions.ToDescription(System.Enum)">
            <summary>Returns the Value of the Description Attribute [System.ComponentModel.Description] or the Name of the Enum as a string if no attribute is defined</summary>
        </member>
        <member name="M:Dry.Framework.Extentions.ToTableField(System.Enum)">
            <summary>Returns the Value of the TableFieldAttribute  [TableField("Notification", "NotificationId")] or null if no attribute is defined</summary>
        </member>
        <member name="M:Dry.Framework.Extentions.ToEnum(Dry.Framework.AuthorizationState,System.String)">
            <summary>Converts a string to the enumeration, if the string is invalid returns Void</summary>
        </member>
        <member name="T:Dry.Framework.EventArguments.RecordsFoundEventArgs">
            <summary>Records were found</summary>
        </member>
        <member name="F:Dry.Framework.EventArguments.RecordsFoundEventArgs.RecordsFound">
            <summary>Records that were found</summary>
        </member>
        <member name="M:Dry.Framework.EventArguments.RecordsFoundEventArgs.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="M:Dry.Framework.EventArguments.RecordsFoundEventArgs.#ctor(System.Data.DataSet)">
            <summary>constructor</summary>
        </member>
        <member name="T:Dry.Framework.EventArguments.FYIEventArgs">
            <summary>FYIEventArgs class is used to inform the user of something</summary>
        </member>
        <member name="F:Dry.Framework.EventArguments.FYIEventArgs.Information">
            <summary>For Your Information</summary>
        </member>
        <member name="M:Dry.Framework.EventArguments.FYIEventArgs.#ctor">
            <summary>Initializes a new instance of the FYIEventArgs class.</summary>
        </member>
        <member name="M:Dry.Framework.EventArguments.FYIEventArgs.#ctor(System.String)">
            <summary>Initializes a new instance of the FYIEventArgs class.</summary>
            <param name="pInformation">For Your Information</param>
        </member>
        <member name="T:Dry.Framework.EventArguments.InternalErrorEventArgs">
            <summary>InternalErrorEventArgs class is used to pass error information to the consumer, and optionally offering the caller a chance to Stop the Process</summary>
        </member>
        <member name="F:Dry.Framework.EventArguments.InternalErrorEventArgs.LastError">
            <summary>Last error if any</summary>
        </member>
        <member name="F:Dry.Framework.EventArguments.InternalErrorEventArgs.Action">
            <summary>Action being berformed</summary>
        </member>
        <member name="F:Dry.Framework.EventArguments.InternalErrorEventArgs.IsCancelable">
            <summary>Is the operation Cancelable, if so you can set CancelOperation = True to abort, otherwise continue is assumed.</summary>
        </member>
        <member name="F:Dry.Framework.EventArguments.InternalErrorEventArgs.CancelOperation">
            <summary>If IsCancelable then set this to true to cancel the operation</summary>
        </member>
        <member name="M:Dry.Framework.EventArguments.InternalErrorEventArgs.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="M:Dry.Framework.EventArguments.InternalErrorEventArgs.#ctor(System.Exception)">
            <summary>constructor</summary>
        </member>
        <member name="M:Dry.Framework.EventArguments.InternalErrorEventArgs.#ctor(System.String,System.Exception)">
            <summary>InternalErrorEventArgs</summary>
            <param name="CurrentAction">String Explaining what the process was when the error occured.</param>
            <param name="ex">Exception</param>
        </member>
        <member name="M:Dry.Framework.EventArguments.InternalErrorEventArgs.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>Constructor</summary>
        </member>
        <member name="T:Dry.Framework.EventArguments.dlvSelectionChangedDelegate">
            <summary>Guess what? The Selection has changed</summary>
        </member>
        <member name="T:Dry.Framework.EventArguments.dlvSelectionChangedEventArgs">
            <summary>Guess what? The Selection has changed</summary>
        </member>
        <member name="F:Dry.Framework.EventArguments.dlvSelectionChangedEventArgs.SelectedIndex">
            <summary>The Selected Index</summary>
        </member>
        <member name="F:Dry.Framework.EventArguments.dlvSelectionChangedEventArgs.SelectedRow">
            <summary>The Selected Row or Nothing (null)</summary>
        </member>
        <member name="M:Dry.Framework.EventArguments.dlvSelectionChangedEventArgs.#ctor">
            <summary>Guess what? The Selection has changed</summary>
        </member>
        <member name="M:Dry.Framework.EventArguments.dlvSelectionChangedEventArgs.#ctor(System.Int32,System.Windows.Forms.ListViewItem)">
            <summary>Guess what? The Selection has changed</summary>
        </member>
        <member name="T:Dry.Framework.EventArguments.HandleableDelegate">
            <summary>Handleable Delegate</summary>
        </member>
        <member name="T:Dry.Framework.EventArguments.HandleableEventArgs">
            <summary>
            Event Arguments Class for Giving the Consumer the ability to perform the task instead of the Object's Internal method.
            </summary>
        </member>
        <member name="F:Dry.Framework.EventArguments.HandleableEventArgs.Handled">
            <summary>Set to True if you are or have handled the event.</summary>
        </member>
        <member name="F:Dry.Framework.EventArguments.HandleableEventArgs.CanHandle">
            <summary>Readonly. Object raising the event notifying you as to the Handleability</summary>
        </member>
        <member name="M:Dry.Framework.EventArguments.HandleableEventArgs.#ctor">
            <summary>Initializes a new instance of the HandleableEventArgs class. Defaulting to Is Handled Unless You Handled.</summary>
        </member>
        <member name="M:Dry.Framework.EventArguments.HandleableEventArgs.#ctor(Dry.Framework.Handling)">
            <summary>Initializes a new instance of the HandleableEventArgs class.</summary>
            <param name="pCanHandle">Readonly. Object raising the event notifying you as to the Handleability</param>
        </member>
        <member name="T:Dry.Framework.EventArguments.DataChangedDelegate">
            <summary>Reports to user that data has changed</summary>
        </member>
        <member name="T:Dry.Framework.EventArguments.DataChangedEventArgs">
            <summary>Reports to user that data has changed</summary>
        </member>
        <member name="F:Dry.Framework.EventArguments.DataChangedEventArgs.Action">
            <summary>Optional Message to inform comsumer</summary>
        </member>
        <member name="F:Dry.Framework.EventArguments.DataChangedEventArgs.ynDirty">
            <summary>Has the data changed from its original state</summary>
        </member>
        <member name="M:Dry.Framework.EventArguments.DataChangedEventArgs.#ctor">
            <summary>Reports to user that data has changed</summary>
        </member>
        <member name="M:Dry.Framework.EventArguments.DataChangedEventArgs.#ctor(System.String,System.Boolean)">
            <summary>Reports to user that data has changed</summary>
        </member>
        <member name="T:Dry.Framework.Exceptions.ExpanderOfException">
            <summary>Exception Expander to assist in issue location identification</summary>
        </member>
        <member name="M:Dry.Framework.Exceptions.ExpanderOfException.#ctor(System.Exception)">
            <summary>Exception Expander to assist in issue location identification</summary>
        </member>
        <member name="P:Dry.Framework.Exceptions.ExpanderOfException.Message">
            <summary>The Error Message</summary>
        </member>
        <member name="P:Dry.Framework.Exceptions.ExpanderOfException.StackTrace">
            <summary>The Stack Trace</summary>
        </member>
        <member name="T:Dry.Framework.Exceptions.PaymentException">
            <summary>Exception for Payment failures.</summary>
        </member>
        <member name="P:Dry.Framework.Exceptions.PaymentException.ErrorName">
            <summary>Human readable, unique name of the error.</summary>
        </member>
        <member name="P:Dry.Framework.Exceptions.PaymentException.ErrorMessage">
            <summary>Message describing the error.</summary>
        </member>
        <member name="P:Dry.Framework.Exceptions.PaymentException.ErrorDetails">
            <summary>Additional details of the error containing Name of the field that caused the error and Reason for the error.</summary>
        </member>
        <member name="P:Dry.Framework.Exceptions.PaymentException.PaypalDebugID">
            <summary>PayPal internal identifier used for correlation purposes.</summary>
        </member>
        <member name="P:Dry.Framework.Exceptions.PaymentException.PayPalErrorInfoURL">
            <summary>URI for detailed information related to this error for the developer.</summary>
        </member>
        <member name="M:Dry.Framework.Exceptions.PaymentException.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>Payment Error Message for payment failures</summary>
        </member>
        <member name="P:Dry.Framework.Exceptions.PaymentException.Message">
            <summary>The Error Message</summary>
        </member>
        <member name="P:Dry.Framework.Exceptions.PaymentException.DeveloperMessage">
            <summary>The Developer Version of the Error Message</summary>
        </member>
        <member name="T:Dry.Framework.Exceptions.PaymentAuthorizationException">
            <summary>Exception for Payment failures.</summary>
        </member>
        <member name="P:Dry.Framework.Exceptions.PaymentAuthorizationException.StateOfAuthorization">
            <summary>State Of Authorization for Payment failures.</summary>
        </member>
        <member name="M:Dry.Framework.Exceptions.PaymentAuthorizationException.#ctor(System.String,System.String)">
            <summary>Exception for Payment failures.</summary>
        </member>
        <member name="T:Dry.Framework.Extensions.Extension">
            <summary>All of our extension methods</summary>
        </member>
        <member name="M:Dry.Framework.Extensions.Extension.ToCommaSeperatedString(System.Data.DataTable,System.Boolean,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:Dry.Framework.Extensions.Extension.ToCommaSeperatedStringByteArray(System.Data.DataTable,System.Boolean,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:Dry.Framework.Extensions.Extension.ToSQLInsertColsSegment(System.Data.DataTable)">
            <summary>Returns a String for the INSERT Column names segment in: INSERT TBL (COLS,COLS) VALUES (VALS,VALS)</summary>
        </member>
        <member name="M:Dry.Framework.Extensions.Extension.ToSQLInsertValsSegment(System.Data.DataRow)">
            <summary>Returns a String for the INSERT Values segment in: INSERT TBL (COLS,COLS) VALUES (VALS,VALS)</summary>
        </member>
        <member name="M:Dry.Framework.Extensions.Extension.ToPacificStandard(System.DateTime)">
            <summary>Convert the date From UTC to Pacific Standard Time Zone</summary>
        </member>
        <member name="T:Dry.Framework.Factory">
            <summary>Main Factory Class</summary>
        </member>
        <member name="M:Dry.Framework.Factory.GetDAC(System.String)">
            <summary>Get an open Data Access Class</summary>
        </member>
        <member name="M:Dry.Framework.Factory.GetDAC(Dry.Framework.DAL.Connect4)">
            <summary>Get an open Data Access Class</summary>
        </member>
        <member name="M:Dry.Framework.Factory.GetDACByName(System.String)">
            <summary>Pulls the connectionstring from web config for you using the ConfigurationManager.ConnectionStrings.  Returns Nothing (null) if not found</summary>
            <param name="ConnectionStringName">name you see in the [add name="ThisName" connectionstr...] in the [connectionStrings] section  </param>
        </member>
        <member name="M:Dry.Framework.Factory.CollectionToList(System.Configuration.ConnectionStringSettingsCollection)">
            <summary>Fix microsoft lamity</summary>
        </member>
        <member name="T:Dry.Framework.Factory.Directs">
            <summary>Model Direct Access Methods</summary>
        </member>
        <member name="M:Dry.Framework.Factory.Directs.Select``1(Dry.Framework.IDryDataAccessClass,Dry.Framework.IDryTableModelAutomation,System.Int32)">
            <summary>Load a single record</summary>
            <typeparam name="T">Object to load</typeparam>
            <param name="DAC">Open DataAccessClass</param>
            <param name="dbo">Instantiated object. Must be same as T</param>
            <param name="PrimaryKeyValue">Value of the PK to load</param>
        </member>
        <member name="M:Dry.Framework.Factory.Directs.Select``1(Dry.Framework.IDryDataAccessClass,Dry.Framework.IDryTableModelAutomation)">
            <summary>Load a single record</summary>
            <typeparam name="T">Object to load</typeparam>
            <param name="DAC">Open DataAccessClass</param>
            <param name="dbo">Instantiated object. Must be same as T</param>
        </member>
        <member name="M:Dry.Framework.Factory.Directs.Create``1(Dry.Framework.IDryDataAccessClass,Dry.Framework.IDryTableModelAutomation)">
            <summary>Save a single record</summary>
            <typeparam name="T">Object to load</typeparam>
            <param name="DAC">Open DataAccessClass</param>
            <param name="dbo">Instantiated object with values to save. Must be same as T</param>
        </member>
        <member name="M:Dry.Framework.Factory.Directs.Update``1(Dry.Framework.IDryDataAccessClass,Dry.Framework.IDryTableModelAutomation)">
            <summary>Save a single record</summary>
            <typeparam name="T">Object to load</typeparam>
            <param name="DAC">Open DataAccessClass</param>
            <param name="dbo">Instantiated object with values to save. Must be same as T</param>
        </member>
        <member name="M:Dry.Framework.Factory.Directs.Delete``1(Dry.Framework.IDryDataAccessClass,Dry.Framework.IDryTableModelAutomation)">
            <summary>Save a single record</summary>
            <typeparam name="T">Object to load</typeparam>
            <param name="DAC">Open DataAccessClass</param>
            <param name="dbo">Instantiated object with values to save. Must be same as T</param>
        </member>
        <member name="M:Dry.Framework.Factory.Directs.Test``1(Dry.Framework.IDryDataAccessClass,Dry.Framework.IDryTableModelAutomation,System.Collections.Generic.List{Dry.Framework.IDryTableModelAutomation},System.Collections.Generic.List{Dry.Framework.IDryTableModelAutomation})">
            <summary>Compare the records of two lists</summary>
            <typeparam name="T">Object to load</typeparam>
            <param name="DAC">Open DataAccessClass</param>
            <param name="dbo">Instantiated object for property automation. Must be same as T</param>
            <param name="OriginalRecords">List of the values you pulled before modifications occured</param>
            <param name="CurrentRecords">List of the same records after modification</param>
        </member>
        <member name="T:Dry.Framework.Generation.Helper">
            <summary>Generation Helper class</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.DumpAllCache">
            <summary>Clears all the cache objects</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.LoadCache(Dry.Framework.IDryDataAccessClass)">
            <summary>Reload all the generation caches</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GetGeneratorVersion">
            <summary>Returns the version of the Entry assembly</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GetGenerationObject(Dry.Framework.IDryDataAccessClass,System.String,System.Boolean)">
            <summary>Creates a Generation object from the schema information in the database</summary>
            <param name="dac">Open Data Access Class</param>
            <param name="ObjectName">Name of Table, View, Stored Procedure, or Function</param>
            <param name="SkipModCheck">If true, Skips the Modifications Alteration step. (CheckControlModifications)</param>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GetGenerationObjectFromSQLReturn(Dry.Framework.IDryDataAccessClass,System.String,System.String)">
            <summary>Creates a Generation object from the schema information in the database</summary>
            <param name="dac">Open Data Access Class</param>
            <param name="Name">Name of new Model (DO NOT USE A NAME THAT ALREADY EXISTS IN YOUR NAMESPACE)</param>
            <param name="TransactSQLStatement">SQL Statement to launch and pull the columns from</param>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GetAllObjectsOfType(Dry.Framework.IDryDataAccessClass,Dry.Framework.DatabaseObjectType,System.Boolean)">
            <summary>Gets all of the specied type in a list</summary>
            <param name="dac">Open Data Access Class</param>
            <param name="oftype">Specify which type you want back. Tables, Views, Stored Procedures, or Functions</param>
            <param name="NamesOnly">Only populate the DBName of the list (faster)</param>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.CheckControlModifications(Dry.Framework.IDryDataAccessClass,System.Collections.Generic.List{Dry.Framework.IAmADBObjectType})">
            <summary>Loads the Control Modification records and applies any mods to the list</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.FindFieldName(System.Data.DataRow)">
            <summary>Returns the column name of the field or parameter or empty string if not found</summary>
            <param name="dr">DataRow with strName, strProcedureName or strColumn</param>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.FindField(System.Data.DataRow,System.String[])">
            <summary>Returns the column name of the field or parameter or empty string if not found</summary>
            <param name="dr">DataRow with strName, strProcedureName or strColumn</param>
            <param name="ColumnNamesToFind">Names of columns you want to find, returns first name found</param>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GetTree(System.Collections.Generic.List{Dry.Framework.IAmADBObjectType},System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Generates an HTML expandable tree for the DB Object Type and it's children fields</summary>
            <param name="loot"></param>
            <param name="HeaderName"></param>
            <param name="StartOTExpanded"></param>
            <param name="StartFTExpanded"></param>
            <param name="StartFTInfoExpanded"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.TextToCSharpBuilder(System.String,System.String,System.Boolean)">
            <summary>Pass in SQL or .Net code to get a function to return the code in a string</summary>
            <param name="strCode">Any Text or Code to put into a string</param>
            <param name="VariableName">Optional.  Name of variable</param>
            <param name="ynAddFunction">True to return a string returning function.  Replace 'Stupendousness' with your function name</param>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GenerateToExtensionMethod(Dry.Framework.IDryTableModelAutomation,Dry.Framework.IDryTableModelAutomation)">
            <summary>Build an extention method</summary>
            <param name="FromObject">Procedure based model object or table based model object</param>
            <param name="ToObject">Model object to convert to</param>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GenerateProcedureCodeForMakeCRUD">
            <summary>Returns the CREATE PROCEDURE statement for the required sp_MakeCRUD</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GetStoredProcedureCode(Dry.Framework.IDryDataAccessClass,System.String)">
            <summary>Gets the CREATE PROCEDURE sql for the given procedure</summary>
            <param name="DAC">Open Data Access Class</param>
            <param name="ProcedureName">Name of procedure. ex: "dbo.sp_helptext"</param>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GenerateRightClickMenu(Dry.Framework.Options.RightClickMenuOptions)">
            <summary>Creates Right Click code</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GenerateAllTableModelFile(Dry.Framework.IDryDataAccessClass,System.String)">
            <summary>Generates the Entire Contents of the Models file (for the given system)</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GenerateAllDriverCalls(Dry.Framework.IDryDataAccessClass,System.String,System.Collections.Generic.List{Dry.Framework.IAmADBObjectType},System.Collections.Concurrent.ConcurrentQueue{System.String})">
            <summary>Generates the driver calls.  if ProcedureList is null then all procedures</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GenerateAllBOCalls(Dry.Framework.IDryDataAccessClass,System.String,System.Collections.Generic.List{Dry.Framework.IAmADBObjectType},System.Collections.Concurrent.ConcurrentQueue{System.String},System.String)">
            <summary>Generates the driver calls.  if ProcedureList is null then all procedures</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GenerateAllProceduresFile(Dry.Framework.IDryDataAccessClass,System.String,System.Boolean,System.Collections.Concurrent.ConcurrentQueue{System.String})">
            <summary>Generates the Entire Contents of the Procedures file (for the given system)</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GenerateAllProceduresFileDebug(Dry.Framework.IDryDataAccessClass,System.String,System.Boolean,System.Collections.Concurrent.ConcurrentQueue{System.String})">
            <summary>Generates the Entire Contents of the Procedures file (for the given system)</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GenerateAllProceduresExecuteToDebug(Dry.Framework.IDryDataAccessClass,System.Collections.Generic.List{System.Type},System.String,System.Collections.Concurrent.ConcurrentQueue{System.String})">
            <summary>Generates the Procedure names and execute to models</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.AttemptToLocateTheBaseTable(System.String,Dry.Framework.IDryDataAccessClass)">
            <summary>Attempts to locate the base table for the given stored procedure</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GenerateDictionaryKeysFile(System.Data.DataTable)">
            <summary>Builds the Entire DictionaryKeys.cs file</summary>
            <param name="dtDictionaryNames">Return table from the SelectDictionaryKeys procedure (Two columns: Parent and Child)</param>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GenerateMemoryTable(Dry.Framework.IDryDataAccessClass,System.String,System.String)">
            <summary>Generates a SQL Table Variable based on the SQL passed in (NOTE: SQL WILL BE EXECUTED)</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GenerateMemoryTable(Dry.Framework.IAmADBObjectType,System.String)">
            <summary>Generates a SQL Table Variable based on the DBObject passed in</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GenerateBOFile(System.String,System.String,System.String,System.Boolean)">
            <summary>Generates a Driver file template</summary>
            <param name="SystemName">Name of System. ex Ocelot, Ticketing, SierraEnergy</param>
            <param name="BOName">Name of the Business Object class name</param>
            <param name="DriverName">Name of Driver.  ex Product, Auction.  NOTE: "Driver" will be appended for you, so don't include it</param>
            <param name="AddSample">add commented out sample code</param>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GenerateDriverFile(System.String,System.String,System.Boolean)">
            <summary>Generates a Driver file template</summary>
            <param name="SystemName">Name of System. ex Ocelot, Ticketing, SierraEnergy</param>
            <param name="DriverName">Name of Driver.  ex Product, Auction.  NOTE: "Driver" will be appended for you, so don't include it</param>
            <param name="AddSample">add commented out sample code</param>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GenerateActionFile(System.String,System.String)">
            <summary>Generates an Action file template</summary>
            <param name="SystemName">Name of System. ex Ocelot, Ticketing, SierraEnergy</param>
            <param name="ActionName">Name of Action.  ex Product, Auction.  NOTE: "Action" will be appended for you, so don't include it</param>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GetRowCountSQL(System.Collections.Generic.List{Dry.Framework.IAmADBObjectType})">
            <summary>gets the SQL to count all the tables requested including a ' -= TOTAL ROWS =- ' record. Columns: intCount, strTableName</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GetRowDataSQL(System.Collections.Generic.List{Dry.Framework.IAmADBObjectType})">
            <summary>gets the SQL to return all the data in the tables requested</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Helper.GenerateTranslatorPropertiesSQL">
            <summary>Get the sql to build the TranslatorProperties class</summary>
        </member>
        <member name="T:Dry.Framework.Generation.GTable">
            <summary>Table Generation Class</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GTable.DBName">
            <summary>Name</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GTable.ObjectID">
            <summary>DB Object_id</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GTable.ObjectType">
            <summary>DB Type.  Table Function, View, etc...</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GTable.OverrideName">
            <summary>Optional.  Model Name override</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GTable.UpdatedOn">
            <summary>Date Last Edit</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GTable.CreatedOn">
            <summary>Date of creation</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GTable.DBFields">
            <summary>Fields on table</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GTable.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GTable.#ctor(System.Data.DataTable)">
            <summary>Constructor from a datarow</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GTable.ToString">
            <summary>Name of the object</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GTable.GenerateModelCS">
            <summary>Creates the Model Table Abstract class</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GTable.GenerateProcedureSCRUD(Dry.Framework.IDryDataAccessClass)">
            <summary>Creates the Stored Procedures to handle SCRUD operations</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GTable.GetFieldNamesCommaSeperated">
            <summary>Returns all of the Field names seperated by comma. ex: TableId, ColumnOne, ColumnTwo</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GTable.GetFieldNamesDotNetParameters">
            <summary>Returns all of the Field names seperated by comma. ex: int TableId, string ColumnOne, datetime ColumnTwo</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GTable.lolFieldName">
            <summary>Length of the longest field name</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GTable.lolFieldType">
            <summary>Length of the longest field type</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GTable.lolFieldDeclaration">
            <summary>Length of the longest field declaration (ToSQLDeclareType)</summary>
        </member>
        <member name="T:Dry.Framework.Generation.GView">
            <summary>View generation object</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GView.DBName">
            <summary>name</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GView.ObjectID">
            <summary>DB Object_id</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GView.ObjectType">
            <summary>type of object ex View</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GView.OverrideName">
            <summary>Optional.  Model Name override</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GView.UpdatedOn">
            <summary>Last edit</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GView.CreatedOn">
            <summary>Date of creation</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GView.DBFields">
            <summary>Fields of view</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GView.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GView.#ctor(System.Data.DataTable)">
            <summary>constructor</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GView.ToString">
            <summary>name of object</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GView.GenerateModelCS">
            <summary>Creates the Model View Abstract class</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GView.GenerateProcedureSCRUD(Dry.Framework.IDryDataAccessClass)">
            <summary>Creates the Stored Procedures to handle SCRUD operations</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GView.GetFieldNamesCommaSeperated">
            <summary>Returns all of the Field names seperated by comma. ex: TableId, ColumnOne, ColumnTwo</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GView.GetFieldNamesDotNetParameters">
            <summary>Returns all of the Field names seperated by comma. ex: int TableId, string ColumnOne, datetime ColumnTwo</summary>
        </member>
        <member name="T:Dry.Framework.Generation.GProcedure">
            <summary>Stored Procedure generation object</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GProcedure.DBName">
            <summary>name</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GProcedure.ObjectID">
            <summary>DB Object_id</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GProcedure.ObjectType">
            <summary>type of object ex Procedure</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GProcedure.OverrideName">
            <summary>Optional.  Model Name override</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GProcedure.UpdatedOn">
            <summary>Last edit</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GProcedure.CreatedOn">
            <summary>Date of creation</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GProcedure.DBFields">
            <summary>parameters of procedure</summary>
        </member>
        <member name="F:Dry.Framework.Generation.GProcedure.Tag">
            <summary>user data</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GProcedure.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GProcedure.#ctor(System.Data.DataTable)">
            <summary>constructor</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GProcedure.ToString">
            <summary>name of object</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GProcedure.ToExecuteString">
            <summary>Creates an Executable string with default values</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GProcedure.GenerateProcedureDriverCall(System.String,Dry.Framework.Generation.GTable)">
            <summary>Returns the functions to put in a driver</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GProcedure.GenerateProcedureBOCall(System.String,Dry.Framework.Generation.GTable,System.String)">
            <summary>Returns the functions to put in a BO class</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GProcedure.GenerateProcedureAbstract(System.String,Dry.Framework.Generation.GTable)">
            <summary>Creates the Model Procedure Abstract class</summary>
            <param name="SystemNamespace">Pass in the System Namespace, Currently Ocelot ot Ticketing</param>
            <param name="BaseTable">Optional base table.  If passed there will be a new constructor and property setter from the base table</param>
        </member>
        <member name="M:Dry.Framework.Generation.GProcedure.GenerateProcedureSingleLineHeader">
            <summary>Creates a single line descriptor for documentation</summary>
            <returns></returns>
        </member>
        <member name="M:Dry.Framework.Generation.GProcedure.GetFieldNamesCommaSeperated">
            <summary>Returns all of the Field names seperated by comma. ex: TableId, ColumnOne, ColumnTwo</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GProcedure.GetFieldNamesDotNetParameters">
            <summary>Returns all of the Field names seperated by comma. ex: int TableId, string ColumnOne, datetime ColumnTwo</summary>
        </member>
        <member name="T:Dry.Framework.Generation.GFunction">
            <summary>User Defined Function generation object</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GFunction.DBName">
            <summary>name</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GFunction.ObjectID">
            <summary>DB Object_id</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GFunction.ObjectType">
            <summary>type of object ex Procedure</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GFunction.OverrideName">
            <summary>Optional.  Model Name override</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GFunction.UpdatedOn">
            <summary>Last edit</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GFunction.CreatedOn">
            <summary>Date of creation</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GFunction.DBFields">
            <summary>parameters of function</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GFunction.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GFunction.#ctor(System.Data.DataTable)">
            <summary>constructor</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GFunction.ToString">
            <summary>name of object</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GFunction.GetFieldNamesCommaSeperated">
            <summary>Returns all of the Field names seperated by comma. ex: TableId, ColumnOne, ColumnTwo</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GFunction.GetFieldNamesDotNetParameters">
            <summary>Returns all of the Field names seperated by comma. ex: int TableId, string ColumnOne, datetime ColumnTwo</summary>
        </member>
        <member name="T:Dry.Framework.Generation.GField">
            <summary>Field generation object</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GField.DBID">
            <summary>DB Id</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GField.DBName">
            <summary>DB Name</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GField.Length">
            <summary>Max Length</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GField.DataType">
            <summary>SQL data type</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GField.DefaultText">
            <summary>Default text if any</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GField.AutoNumber">
            <summary>Is field an Autonumber primary key</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GField.Nullable">
            <summary>Is field Nullable</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GField.Computed">
            <summary>Is field a fake computed field</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GField.Description">
            <summary>Description on field</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GField.Precision">
            <summary>Precision</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GField.UniqueConstrained">
            <summary>Is Column involved in a unique constraint</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GField.FieldAttributes">
            <summary>Extra Attributes desired to be on a field</summary>
        </member>
        <member name="F:Dry.Framework.Generation.GField.Tag">
            <summary>User assigned data associated with the object</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GField.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GField.#ctor(System.Data.DataRow)">
            <summary>Construct field from datarow</summary>
            <param name="dr">DataRow from Info_GetFieldDT</param>
        </member>
        <member name="M:Dry.Framework.Generation.GField.#ctor(System.Data.DataColumn)">
            <summary>Construct field from data column</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GField.ToString">
            <summary>name</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GField.IsRequired">
            <summary>Required if Not nullable and has no default value.  Autonumber is not required. Special Fields are not required.</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GField.IsSpecialField">
            <summary>Signifies that the field is a special case handled field in the system</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GField.IsLongTextField">
            <summary>Is this a long text field (over 200 in length)</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GField.ToSQLDeclareType">
            <summary>Returns Field Declare</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GField.ToSQLInfo">
            <summary>Returns Field Name and Information</summary>
        </member>
        <member name="T:Dry.Framework.Generation.GParameter">
            <summary>Parameter generation object</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GParameter.DBID">
            <summary>DB Id</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GParameter.DBName">
            <summary>Name in DB</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GParameter.Length">
            <summary>Length</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GParameter.DataType">
            <summary>SQL Data Type</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GParameter.DefaultText">
            <summary>Default text if any</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GParameter.DirectionOfParameter">
            <summary>Direction of parameter 1 = In 2 = out</summary>
        </member>
        <member name="F:Dry.Framework.Generation.GParameter.Tag">
            <summary>User assigned data associated with the object</summary>
        </member>
        <member name="F:Dry.Framework.Generation.GParameter.BaseField">
            <summary>Not normally loaded, this would the Field from a table, if the parameter is based on a table column and if the loader you used loaded it (not normal, use ?BaseFieldIsSet to find out)</summary>
        </member>
        <member name="P:Dry.Framework.Generation.GParameter.BaseFieldIsSet">
            <summary>Returns True if BaseField is Not Null, false otherwise</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GParameter.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GParameter.#ctor(System.Data.DataRow)">
            <summary>Construct parameter from datarow</summary>
            <param name="dr">DataRow from Info_GetStoredProcedureParamsDT</param>
        </member>
        <member name="M:Dry.Framework.Generation.GParameter.ToString">
            <summary>Name of the object</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GParameter.IsLongTextField">
            <summary>Is this a long text field (over 200 in length)</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GParameter.ToSampleValue(Dry.Framework.GenerationFormatType,System.String,System.String)">
            <summary>Creates a sample value</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GParameter.ToTickString">
            <summary>If its the kind of type that needs (')'s around the value this will return the tick, "" if not</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GParameter.ToLengthString">
            <summary>If is the kind of type that needs (len) or (len,prec) after the type, this will return that string or empty string if not</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GParameter.ToSQLDeclareType">
            <summary>Returns Field Declare</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GParameter.ToDotNetDeclare(System.Boolean)">
            <summary>Returns the declare line for C# ex: int YearsAgo, string FirstName</summary>
        </member>
        <member name="M:Dry.Framework.Generation.GParameter.ToDotNetObjectInitializer">
            <summary>Returns the Object Initializer code for C# ex: YearsAgo = yearsAgo, firstName = pfirstName</summary>
            <remarks>Assumes you use lowercase first letter in your parameters and uppercase for your properties.  otherwise it appends a p for parameter (and you will too)</remarks>
        </member>
        <member name="M:Dry.Framework.Generation.GParameter.ToSQLInfo">
            <summary>Returns Field Name and Information</summary>
        </member>
        <member name="T:Dry.Framework.Generation.Alteration">
            <summary>Generation Control Table Support</summary>
        </member>
        <member name="T:Dry.Framework.Generation.Alteration.Driver">
            <summary>Generation Control Table Driver</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Alteration.Driver.GetGenerationControlObject(Dry.Framework.IDryDataAccessClass,System.Int32)">
            <summary>Returns the Table record with it's child fields records</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Alteration.Driver.GetGenerationControlObjects(Dry.Framework.IDryDataAccessClass)">
            <summary>Returns All the Table records with their child fields records</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Alteration.Driver.GetGenerationControlFields(Dry.Framework.IDryDataAccessClass)">
            <summary>Returns All the Field records</summary>
        </member>
        <member name="T:Dry.Framework.Generation.Alteration.GenerationControlObject">
            <summary>Generation Control Object Table Abstract Class</summary>
        </member>
        <member name="P:Dry.Framework.Generation.Alteration.GenerationControlObject.Fields">
            <summary>Potential fields or Nothing (null)</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Alteration.GenerationControlObject.ToGFieldList">
            <summary>Converts the Fields list to a GField list</summary>
        </member>
        <member name="P:Dry.Framework.Generation.Alteration.GenerationControlObject.FieldCount">
            <summary>Returns the number of fields in the list or 0 if the list is Nothing (null)</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Alteration.GenerationControlObject.GetFieldNamesCommaSeperated">
            <summary>Returns the concatenation of the field names seperated by commas</summary>
        </member>
        <member name="P:Dry.Framework.Generation.Alteration.GenerationControlObject.GenerationControlId">
            <summary>Generation Control Id</summary>
            <remarks>Control Object Key</remarks>
        </member>
        <member name="P:Dry.Framework.Generation.Alteration.GenerationControlObject.ObjectName">
            <summary>Object Name</summary>
            <remarks>Name of Database Object</remarks>
        </member>
        <member name="P:Dry.Framework.Generation.Alteration.GenerationControlObject.ModelName">
            <summary>Model Name</summary>
            <remarks>Name of the Model Object (override)</remarks>
        </member>
        <member name="M:Dry.Framework.Generation.Alteration.GenerationControlObject.PropertyAttributes">
            <summary>Gets a list of property attributes</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Alteration.GenerationControlObject.PropertyValidation(System.Boolean)">
            <summary>Validate the Properties of this Instance.  Throws an Exception if the required fields are not set.</summary> 
            <returns>String.Empty if Valid, otherwise Throws an Exception if Quiet Operation is false.  If Quiet Operation is True then returns the error in a string.</returns> 
            <exception cref="T:System.Data.NoNullAllowedException">Required Field omitted.</exception>
        </member>
        <member name="T:Dry.Framework.Generation.Alteration.GenerationControlField">
            <summary>Generation Control Field Table Abstract Class</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Alteration.GenerationControlField.#ctor">
            <summary>Generation Control Field Abstract Class</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Alteration.GenerationControlField.ToGField">
            <summary>Converts the current instance to a GField object</summary>
            <returns></returns>
        </member>
        <member name="P:Dry.Framework.Generation.Alteration.GenerationControlField.GenerationControlFieldId">
            <summary>Ceneration Control Field Id</summary>
            <remarks>Field Key</remarks>
        </member>
        <member name="P:Dry.Framework.Generation.Alteration.GenerationControlField.GenerationControlId">
            <summary>Generation Control Id</summary>
            <remarks>Control Object</remarks>
        </member>
        <member name="P:Dry.Framework.Generation.Alteration.GenerationControlField.FieldName">
            <summary>Field Name</summary>
            <remarks>Name of Field to add</remarks>
        </member>
        <member name="P:Dry.Framework.Generation.Alteration.GenerationControlField.FieldType">
            <summary>Field Type</summary>
            <remarks>SQL Type of Field. ex varchar, int, datetime, money</remarks>
        </member>
        <member name="P:Dry.Framework.Generation.Alteration.GenerationControlField.FieldLength">
            <summary>Field Length</summary>
            <remarks>Length of field</remarks>
        </member>
        <member name="P:Dry.Framework.Generation.Alteration.GenerationControlField.FieldPrecision">
            <summary>Field Precision</summary>
            <remarks>Precision of field. varchar=0, int=10, datetime=23, money=19</remarks>
        </member>
        <member name="P:Dry.Framework.Generation.Alteration.GenerationControlField.FieldNullable">
            <summary>Field Nullable</summary>
            <remarks>Is Field Nullable</remarks>
        </member>
        <member name="P:Dry.Framework.Generation.Alteration.GenerationControlField.FieldDefaultText">
            <summary>Field Default Text</summary>
            <remarks>Default Value of field</remarks>
        </member>
        <member name="P:Dry.Framework.Generation.Alteration.GenerationControlField.FieldDescription">
            <summary>Field Description</summary>
            <remarks>Description of Field</remarks>
        </member>
        <member name="P:Dry.Framework.Generation.Alteration.GenerationControlField.FieldInUniqueConstraint">
            <summary>Field In Unique Constraint</summary>
            <remarks>Is the Field involved in a Unique Constraint</remarks>
        </member>
        <member name="P:Dry.Framework.Generation.Alteration.GenerationControlField.IsModelAddition">
            <summary>Is Model Addition</summary>
            <remarks>Is this a Model Additional Field</remarks>
        </member>
        <member name="P:Dry.Framework.Generation.Alteration.GenerationControlField.IsProcedureAddition">
            <summary>Is Procedure Addition</summary>
            <remarks>Is this an additional field for a procedure return model</remarks>
        </member>
        <member name="P:Dry.Framework.Generation.Alteration.GenerationControlField.FieldAttributes">
            <summary>Field Attributes</summary>
            <remarks>Attributes of Field</remarks>
        </member>
        <member name="M:Dry.Framework.Generation.Alteration.GenerationControlField.PropertyAttributes">
            <summary>Gets a list of property attributes</summary>
        </member>
        <member name="M:Dry.Framework.Generation.Alteration.GenerationControlField.PropertyValidation(System.Boolean)">
            <summary>Validate the Properties of this Instance.  Throws an Exception if the required fields are not set.</summary> 
            <returns>String.Empty if Valid, otherwise Throws an Exception if Quiet Operation is false.  If Quiet Operation is True then returns the error in a string.</returns> 
            <exception cref="T:System.Data.NoNullAllowedException">Required Field omitted.</exception>
        </member>
        <member name="T:Dry.Framework.Generation.sp_makeCRUD">
            <summary>The Abstract Procedure Class for Stored Procedure 'sp_makeCRUD'</summary>
        </member>
        <member name="E:Dry.Framework.Generation.sp_makeCRUD.ActionPullAsynchronousCompleted">
            <summary>Records were found (Used in the Asynchronous method only)</summary>
        </member>
        <member name="E:Dry.Framework.Generation.sp_makeCRUD.ActionPullAsynchronousException">
            <summary>An Error has occured (Used in the Asynchronous method only)</summary>
        </member>
        <member name="P:Dry.Framework.Generation.sp_makeCRUD.DatabaseObjectName">
            <summary>Name of Database object</summary>    
        </member>
        <member name="P:Dry.Framework.Generation.sp_makeCRUD.GetParmameters">
            <summary>Gets a list of the parameters</summary>
        </member>
        <member name="M:Dry.Framework.Generation.sp_makeCRUD.Execute">
            <summary>Executes the Stored Procedure InsertAuction</summary>
            <exception cref="T:System.Data.DataException">Thrown on any error</exception>
            <example><code>
             prcsp_makeCRUD spp = new sp_makeCRUD((IDryDataAccessClass)OpenedInstanceOfDAC)
             prcsp_makeCRUD.ParamOne = ValueToPassProc
             prcsp_makeCRUD.ParamETC = YouGetTheIdea
             DataSet ds = prcsp_makeCRUD.Execute()
            </code>
            </example>
        </member>
        <member name="M:Dry.Framework.Generation.sp_makeCRUD.ExecuteAsynchronously">
            <summary>Execute Stored Procedure in the Background</summary>
            <example><code>
            private void ButtonExecute_Click(object sender, EventArgs e) {
             prcsp_makeCRUD spp = new prcsp_makeCRUD((IDryDataAccessClass)OpenedInstanceOfDAC)
             prcsp_makeCRUD.ParamOne = ValueToPassProc
             prcsp_makeCRUD.ParamETC = YouGetTheIdea
             
             prcsp_makeCRUD.ActionPullAsynchronousCompleted += OnRecordsFound
             prcsp_makeCRUD.ActionPullAsynchronousException += OnInternalError
             prcsp_makeCRUD.ExecuteAsynchronously()
             }
             private void OnRecordsFound(object sender, Dry.Framework.EventArguments.RecordsFoundEventArgs e) { // Handle The Completion, E has the DataSet }
             private void OnInternalError(object sender, Dry.Framework.EventArguments.InternalErrorEventArgs e) { // Handle The Failure, E has the Error }
             
            </code></example>
        </member>
        <member name="P:Dry.Framework.Generation.sp_makeCRUD.Completed">
            <summary>Value is true when the Asynchronous Execution has completed</summary>
        </member>
        <member name="M:Dry.Framework.Generation.sp_makeCRUD.AbortAsynchronous">
            <summary>If the ExecuteAsynchronously Method was called, This will attempt to Abort the Thread. Microsoft: "Calling this method USUALLY terminates the thread."</summary>
        </member>
        <member name="M:Dry.Framework.Generation.sp_makeCRUD.PropertyAttributes">
            <summary>Gets a list of property attributes</summary>
        </member>
        <member name="P:Dry.Framework.Generation.sp_makeCRUD.objectName">
            <summary>object Name.  objectName sysname</summary>
        </member>
        <member name="P:Dry.Framework.Generation.sp_makeCRUD.executionMode">
            <summary>execution Mode.  executionMode tinyint.  1 = Print, 2 = Output the script as SELECT, 4 = Execute and Commit, 8 = Execute and Rollback</summary>
        </member>
        <member name="P:Dry.Framework.Generation.sp_makeCRUD.dropExistingProcedures">
            <summary>drop Existing Procedures.  dropExistingProcedures bit</summary>
        </member>
        <member name="P:Dry.Framework.Generation.sp_makeCRUD.outputIndentityCalcFields">
            <summary>output Indentity Calc Fields.  outputIndentityCalcFields bit</summary>
        </member>
        <member name="M:Dry.Framework.Generation.sp_makeCRUD.ProcedureExist">
            <summary>Method ProcedureExist Returns True or False indicating the Existance of the Procedure</summary> 
        </member>
        <member name="M:Dry.Framework.Generation.sp_makeCRUD.#ctor(Dry.Framework.IDryDataAccessClass)">
            <summary>Overloaded Constructor Method</summary>
            <param name="OpenDataClass">A valid, active, and connected, IDryDataAccessClass Object</param>  
        </member>
        <member name="T:Dry.Framework.Helpers.Types">
            <summary>Helper methods that deal with types and type names</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.CopyProperties``2(System.Collections.Generic.List{``1})">
            <summary>
            So you can create an extender class (T) that inherits from U.
              This will copy all the properties from a list of U to a new list of T.
              <example>
              <para>ex:</para>
              <para><code>BaseClass bc = new BaseClass();</code></para>
              <para><code>ExtenderClass ec = Types.CopyProperties&lt;ExtenderClass, BaseClass&gt;(bc);</code></para>
              </example>
            </summary>
            <typeparam name="T">Destination Object Type that inherits from U</typeparam>
            <typeparam name="U">Source Object type to copy property values from</typeparam>
            <param name="CopyFrom">List of Object to copy properties from</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.CopyProperties``2(``1)">
            <summary>
            So you can create an extender class that inherits from U.
              This will copy all the properties from U to a new instance of T. 
              <example>
              <para>ex:</para>
              <para><code>BaseClass bc = new BaseClass();</code></para>
              <para><code>ExtenderClass ec = Types.CopyProperties&lt;ExtenderClass, BaseClass&gt;(bc);</code></para>
              </example>
            </summary>
            <typeparam name="T">Destination Object Type that inherits from U</typeparam>
            <typeparam name="U">Source Object type to copy property values from</typeparam>
            <param name="CopyFrom">Object to copy properties</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.CopyPropertiesBlind``2(``1,System.Boolean)">
            <summary>
              This will copy all the properties that have the same name from U to a new instance of T. (Blind because T does not inhert from U)
              <example>
              <para>ex:</para>
              <para><code>ClassA a = new ClassA() {Name = 'Sample'};</code></para>
              <para><code>ClassB b = Types.CopyPropertiesBlind&lt;ClassB, ClassA&gt;(a);</code></para>
              </example>
            </summary>
            <typeparam name="T">Destination Object Type that has some of the same property names as U</typeparam>
            <typeparam name="U">Source Object type to copy property values from</typeparam>
            <param name="CopyFrom">Object to copy properties</param>
            <param name="MatchCase">Match case of the property names</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.CompareMatchingProperties``2(``0,``1,System.Boolean)">
            <summary>
              This will compare all the properties that have the same name from U to a new instance of T. 
              <example>
              <para>ex:</para>
              <para><code>ClassA a = new ClassA() {Name = 'Sample'};</code></para>
              <para><code>ClassB b = new ClassA() {Name = 'Elpmas'};</code></para>
              <para><code>bool IsSame = Types.CompareMatchingProperties&lt;ClassA, ClassB&gt;(a, b);</code></para>
              </example>
            </summary>
            <typeparam name="T">Object type of first parameter</typeparam>
            <typeparam name="U">Object type of second parameter</typeparam>
            <param name="Item1">Object that has some of the same property names as U</param>
            <param name="Item2">Object that has some of the same property names as T</param>
            <param name="MatchCase">Match case of the property names</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.RoundMoneyProperties``1(``0@,System.Int32)">
            <summary>
              This will round all the properties that are a type that would cause the generator to make a money field ie (money, decimal, real, numeric, smallmoney)
              <example>
              <para>ex:</para>
              <para><code>ClassA a = new ClassA() {Cost = M5.99999233};</code></para>
              <para><code>Types.RoundMoneyProperties&lt;ClassA&gt;(a, 4);</code></para>
              </example>
            </summary>
            <typeparam name="T">Object Type that has some of the properties as money (Decimal)</typeparam>
            <param name="ClassToRound">Object to round decimal properties</param>
            <param name="DecimalPlaces">The number of decimal places for each property.</param>
        </member>
        <member name="T:Dry.Framework.Helpers.Types.CountDistinct">
            <summary>Name and Count of Name</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.Types.CountDistinct.Value">
            <summary>Distinct Value</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.Types.CountDistinct.Count">
            <summary>Count of Distinct Value</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.CountDistinct.ToString">
            <summary>Returns the Value</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.DistinctPropertyWithCount``1(System.Collections.Generic.List{``0},System.String)">
            <summary>Counts the Distinct Values of a Property in a List</summary>
            <typeparam name="T">The Type of the Item in the List</typeparam>
            <param name="ListOfObjects">List of objects to perform Distinct count of a Property</param>
            <param name="ColumnNameToDistinctCount">Name of the Property to Count Distinct</param>
            <returns>List of the Distinct Values of the Property along with the counts of each value</returns>
            <example>List&lt;CountDistinct&gt; disCounts = DistinctPropertyWithCount&lt;SIG.SierraEnergy.Models.Employee&gt;(pEmployee, "FullName");</example>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.ImplementsInterface``1(System.Type)">
            <summary>Test if object implements interface. ex. if(Types.ImplementsInterface&lt;ICloneable&gt;(myobj)==true) {}</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.ToSQLName(System.String)">
            <summary>Pass in Any Type Name (obj.GetType.FullName) and get back: [char, varchar, nvarchar, int, bigint, tinyint, datetime, money, bit, binary, uniqueidentifier]</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.DataTableToModelObject``1(System.Data.DataTable)">
            <summary>Converts a datatable with the same columns as your model into a list of your model</summary>
            <typeparam name="T">Your Model class.  Example: List&lt;Attachment&gt; Records = Types.DataTableToModelObject&lt;Attachment&gt;(dt);</typeparam>
            <param name="dt">A datatable consisting of the columns that are properties on your model class</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.DataRowToModelObject``1(System.Data.DataRow,System.Collections.Generic.List{System.String})">
            <summary>Converts a DataRow to a Model</summary>
            <typeparam name="T">Your Model</typeparam>
            <param name="row">the row with the data</param>
            <param name="ColumnNames">names of the columns</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.DataTableFromModels``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Converts a list of Model classes to a datatable</summary>
            <typeparam name="T">Your Model</typeparam>
            <param name="collection">List of your model</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.PropertyWrite(System.Object@,System.String,System.Object)">
            <summary>Set's the Property value on an object</summary>
            <param name="obj">Object containing the property</param>
            <param name="strPropertyName">Property to set</param>
            <param name="value">Value to set property to</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.GetPropertyDatabaseColumnAttributes(System.Type,System.String)">
            <summary>Returns the Database Column Attribute value of the specified Property of an object</summary>
            <param name="oType">Type of Object with Properties</param>
            <param name="strPropertyName">Name of property you want to pull from</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.GetPropertyDatabaseColumnAttributes(System.Type)">
            <summary>Returns the Database Column Attribute value of all Properties of an object</summary>
            <param name="oType">Type of Object with Properties</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.ToDotNetName(System.String)">
            <summary>
            Pass in Any Type Name (obj.GetType.FullName) and get back: [bool, short, DateTime, Decimal, int, Char, String, Guid, Byte[], Byte ]
            </summary>
            <param name="strFullTypeName">Type name to convert to one of: bool, short, DateTime, Decimal, int, Char, String, Guid, Byte[], Byte </param>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.ToSqlClientType(System.String)">
            <summary>Pass in Any SQL Server Data Type Name (int, varchar, money, decimal, etc...) and get back: [SqlDbType.VarChar, SqlDbType.Decimal, etc... ]</summary>
            <param name="strSqlDataType">SQL Server name of column data type </param>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.FromName(System.String)">
            <summary>sql name to standard type (ex: char, varchar, int, uniqueidentifier)</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.PlayData(Dry.Framework.StandardTypes)">
            <summary>Returns sample data per type</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.NoData(Dry.Framework.StandardTypes)">
            <summary>Returns empty data per type with sql ticks if needed example: string= '', int = 0, datetime = '1900-01-01 00:00:00.000'</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.WrapData(Dry.Framework.StandardTypes,System.Object)">
            <summary>Returns your data in a string per type with sql ticks if needed example: string= 'yourtext', int = 5, datetime = '1900-01-01 00:00:00.000'</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.WrapData(System.Data.DataColumn,System.Data.DataRow,System.Boolean)">
            <summary>Returns your data in a string per type with sql ticks if needed example: string= 'yourtext', int = 5, datetime = '1900-01-01 00:00:00.000'</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.WrapDoubleData(Dry.Framework.StandardTypes,System.Object)">
            <summary>Returns your data in a string per type with double quotes if needed example: string= "yourtext", int = 5, datetime = "1900-01-01 00:00:00.000"</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.WrapDoubleData(System.Data.DataColumn,System.Data.DataRow)">
            <summary>Returns your data in a string per type with double quotes if needed example: string= "yourtext", int = 5, datetime = "1900-01-01 00:00:00.000"</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Types.GetDescriptionAttributeValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>Get The Description value of the Entity's property</summary>
            <typeparam name="TEntity">Class that has the property.  Example: Member</typeparam>
            <typeparam name="TProperty">property type that has a DescriptionAttribute. Example: String</typeparam>
            <param name="pProperty">lambda of the column. Example: p => p.Email<para>    GetDescriptionAttributeValue&lt;AssignedAsset, int&gt;(p =&gt; p.AssetId);</para><para>GetDescriptionAttributeValue&lt;AssignedAsset, bool&gt;(p =&gt; p.IsDeleted);</para><para>GetDescriptionAttributeValue&lt;AssignedAsset, DateTime&gt;(p =&gt; p.CreatedOn);</para></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Framework.Helpers.Strings">
            <summary>String Helper class</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeString(System.Object,System.Int32,System.Boolean)">
            <summary>Takes any object and returns a String or empty length string (will not return Nothing (null) under any circumstance)</summary>
            <param name="strObject">Any object to pull a string from</param>
            <param name="intMaxLength">Optional Maximum length (string will be truncated if exceeds max length)</param>
            <param name="ynForceLength">Optional Forces length to specified, if shorter the string will be right padded</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeInteger(System.Object)">
            <summary>Converts any type to an Integer Safely (no error will ever be thrown)</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeDouble(System.Object)">
            <summary>Converts any type to an Double Safely (no error will ever be thrown)</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeDecimal(System.Object)">
            <summary>Converts any type to an Decimal Safely (no error will ever be thrown)</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeSingle(System.Object)">
            <summary>Converts any type to an Single Safely (no error will ever be thrown)</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeShort(System.Object)">
            <summary>Converts any type to an Short Safely (no error will ever be thrown)</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeLong(System.Object)">
            <summary>Converts any type to an Long Safely (no error will ever be thrown)</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeByte(System.Object)">
            <summary>Converts any type to a Byte Safely (no error will ever be thrown)</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeChar(System.Object)">
            <summary>Converts any type to a Char Safely (no error will ever be thrown) on error returns  System.Convert.ToChar(0)</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeBoolean(System.Object)">
            <summary>Converts any type to a Boolean Safely (no error will ever be thrown)</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeGuid(System.Object)">
            <summary>
            Takes any object and returns a Guid or Guid.Empty (will not return Nothing (null) under any circumstance)
            </summary>
            <param name="guiObject">Any object to pull a guid from</param>
        </member>
        <member name="F:Dry.Framework.Helpers.Strings.GlobalMinDate">
            <summary>Safe Date Functions return this on error or on bad date</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeUTCTo(System.Object,Dry.Framework.Helpers.TimeZoneUtil.TimeZones)">
            <summary>Convert a UTC DateTime to the local time</summary>
            <param name="BoxedDateInUTC">any valid datetime value from UTC Time zone</param>
            <param name="eDestinationZone">Zone to translate it the UTC to</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeUTCTo(System.DateTime,Dry.Framework.Helpers.TimeZoneUtil.TimeZones)">
            <summary>Convert a UTC DateTime to the local time</summary>
            <param name="dtmInUTC">any datetime value from UTC Time zone</param>
            <param name="eDestinationZone">Zone to translate it the UTC to</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeUTCFrom(System.Object,Dry.Framework.Helpers.TimeZoneUtil.TimeZones)">
            <summary>Convert a Non UTC DateTime to UTC</summary>
            <param name="BoxedDateInSourceZone">any valid datetime value NOT from UTC Time zone</param>
            <param name="eSourceZone">Zone to translate it from</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeUTCFrom(System.DateTime,Dry.Framework.Helpers.TimeZoneUtil.TimeZones)">
            <summary>Convert a Time zoned DateTime to UTC</summary>
            <param name="dtmInSourceZone">any datetime value NOT from UTC Time zone</param>
            <param name="eSourceZone">Zone to translate it from</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeDate(System.Object)">
            <summary>
            Attempts to turn any object into a date
            </summary>
            <param name="dtmObject">any object representing a date (if not 1/1/1900 will be returned)</param>
            <remarks>
            SafeDate("19730629") = #06/29/1973# 
            SafeDate("06291973") = #06/29/1973# 
            SafeDate("0730629") = #06/29/1973# (New Retarded Format) 
            SafeDate("1730629") = #06/29/2073# (New Retarded Format) 
            </remarks>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeFieldValue(System.Data.DataRow,System.String,System.String)">
            <summary>Returns the value of the column specified in the row passed Safely (no error will ever be thrown)</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeFieldValue(System.Data.DataRow,System.String,System.Int32)">
            <summary>
            Returns the value of the column specified in the row passed Safely (no error will ever be thrown)
            </summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeFieldValue(System.Data.DataRow,System.String,System.Decimal)">
            <summary>
            Returns the value of the column specified in the row passed Safely (no error will ever be thrown)
            </summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeFieldValue(System.Data.DataRow,System.String,System.Boolean)">
            <summary>
            Returns the value of the column specified in the row passed Safely (no error will ever be thrown)
            </summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeFieldValue(System.Data.DataRow,System.String,System.DateTime)">
            <summary>
            Returns the value of the column specified in the row passed Safely (no error will ever be thrown)
            </summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeFileName(System.Object,System.Boolean)">
            <summary>
            Removes Invalid Characters (\, /, :, *, ?, ", &lt;, &gt;, and |) from a potential Filename.
            </summary>
            <param name="strObject">Any object containing a filename in a string or ToString.</param>
            <param name="ynStandardReplace">If True Invalid chars will be replaced with -.  If False they will be removed.</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.BoolString(System.Boolean)">
            <summary>Convert a boolean to the string "true" or "false"</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.FormatNumber(System.Object)">
            <summary>
            Converts any type to an Decimal Safely to a formatted number 321123 = 321,123
            </summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.FormatNumber(System.Object,System.Int32)">
            <summary>
            Converts any type to an Decimal Safely to a formatted number 321123 = 321,123
            </summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.FormatMoney(System.Object)">
            <summary>
            Converts any type to an Decimal Safely to a formatted number 321123.91 = $321,123.91
            </summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.FormatMoney(System.Object,System.Int32)">
            <summary>
            Converts any type to an Decimal Safely to a formatted number 321123.91 = $321,123.91
            </summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.NumbersOnly(System.String,System.Boolean)">
            <summary>
            Pass in a string of text to have nothing but the numbers returned
            </summary>
            <param name="strAlphNumeric">String of text to filter all text that is not a number (0-9)</param>
            <param name="ynAllowDecimalPoint">Allow 1 Decimal Point</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.DateStripTime(System.DateTime)">
            <summary>
            Removes the Time component of a Date '04/14/2009 09:14:1234' Becomes: '04/14/2009 00:00:0000'
            </summary>
            <param name="dtmTimeless">Date to remove Time Component</param>
            <remarks></remarks>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.DateStripDate(System.DateTime)">
            <summary>
            Removes the Date component of a DateTime '04/14/2009 09:14:1234' Becomes: '01/01/0001 09:14:1234'
            </summary>
            <param name="dtmDateless">DateTime to remove Date Component</param>
            <remarks></remarks>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.DateShortString(System.Object,System.Boolean)">
            <summary>
            Returns a Short Date 'MM/dd/yyyy' if the date is Null or Below 1900 then '01/01/1900' is returned.
            </summary>
            <param name="DateIN">The DateTime to return the Date Portion of.</param>
            <param name="ynEOT">If true then Invalid dates return 12/31/2999 instead of 01/01/1900 </param>
            <returns>String Containing a Short Date</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.DateLongString(System.Object,System.Boolean)">
            <summary>
            Formats any input to standard Date Format ("MM/dd/yyyy hh:mm:ss tt") Invalid Dates become 1/1/1900
            </summary>
            <param name="DateIN">Nothing, DBNull, String.Empty or any Valid date</param>
            <param name="ynEOT">If true then Invalid dates return '12/31/2999 11:59:59 PM' instead of '01/01/1900 12:00:00 AM'</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.DateSortString(System.Object,System.Boolean)">
            <summary>
            Returns a Short Date 'yyyy.MM.dd' if the date is Null or Below 1900 then '1900.01.01' is returned.
            </summary>
            <param name="DateIN">The DateTime to return the Date Portion of.</param>
            <param name="ynEOT">If true then Invalid dates return 2999.12.31 instead of 1900.01.01 </param>
            <returns>String Containing a Sortable Date</returns>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.DateFirstOfMonth(System.Int32,System.Int32)">
            <summary>
            Gets a date for the First Day of a month
            </summary>
            <param name="intMonth">-1 for Current Month, or Specify month (1 to 12).</param>
            <param name="intYear">-1 for Current Year, or Specify Year (1 to 9999).</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.DateLastOfMonth(System.Int32,System.Int32)">
            <summary>
            Gets a date for the Last Day of a month
            </summary>
            <param name="intMonth">-1 for Current Month, or Specify month (1 to 12).</param>
            <param name="intYear">-1 for Current Year, or Specify Year (1 to 9999).</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.DateOrNullWord(System.Object)">
            <summary>
            Returns a Boxed Date Object or a Boxed String Object containing the word "Null"
            </summary>
            <param name="DateIN">Date, Nothing or DBNull</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.DateBetweenSQL(System.Object,System.Object,System.String,System.String)">
            <summary>
            Returns DATE SQL for two dates
            </summary>
            <param name="oDateFrom">First Date in SQL BETWEEN Statement</param>
            <param name="oDateTo">Ending Date in SQL BETWEEN Statement</param>
            <param name="strFieldName">Name of Field</param>
            <param name="DateFormat">Date Format ex: "MM/dd/yyyy hh:mm:ss tt"</param>
            <returns>
            Example:<br></br>
            sSql = sSql &amp; DateBetweenSQL(mskDateFrom.Value, mskDateTo.Value, "reg_date", "MM/dd/yyyy")<br></br>
            If mskDateFrom is null then you will get: " reg_date &lt; '1/1/2004' "<br></br>
            If mskDateTo   is null then you will get: " reg_date &gt; '1/1/2000' "<br></br>
            If mskDateFrom is Null and mskDateTo is null then an Empty string is returned<br></br>
            </returns>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.DateIsInRange(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Use to Determin if a Date Value falls within a Date Range
            </summary>
            <param name="dtmStart">The Start of the Date Range</param>
            <param name="dtmEnd">The End of the Range</param>
            <param name="dtmValue">The Value to Check if it is in Range</param>
            <returns>True if the Date Is Equal or Greater than Start And Less Than or Equal to End, False otherwise</returns>
            <remarks>
            If StartDate is Null then Date.MinValue will be used
            If EndDate is Null then Date.MaxValue will be used
            If Value is Null then False
            </remarks>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.DateIsNewer(System.DateTime,System.DateTime)">
            <summary>
            Returns True if Second Date is newer
            </summary>
            <param name="dtmDate">First Date</param>
            <param name="dtmNewerDate">Second Date</param>
            <returns>Returns True if dtmNewerDate is After dtmDate</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.IsVowel(System.Char)">
            <summary>Returns true if the char is a vowel</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.SafeFieldName(System.Object)">
            <summary>Always Return a Unique Field Name or a Valid Name for a Column Object based on input</summary>
            <param name="strObject">Object containing a field name</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.ParseDelimitedString(System.String,System.Char)">
            <summary>Parses a Delimited string (like from a CSV file) with double quote seperation implementated</summary>
            <param name="pstrCompleteLine">line to split.  ex. Mary Smith,"Tom",The """Situation LLC""","BBC, Inc"</param>
            <param name="pchrDelimiter">split delimiter. ex. ','</param>
            <returns>a string array of the values split</returns>
            <remarks>
            For a successful parse <br />
            (1) the elements must be delimited by pchrDelimiter <br />
            (2) three quotes are used to denote an embedded quote <br />
            (3) quotes must be a matching pair pair (begin and end) <br />
            (4) embedded delimiters must be contained inside matching quotes
            </remarks>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.StringToByteArray(System.String)">
            <summary>Convert a string to a byte array</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.StringFromByteArray(System.Byte[])">
            <summary>Convert a byte array to a string</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.AlphabetOnly(System.String)">
            <summary>Only allows a-z and A-Z.  all other text is removed</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.GetStringBetween(System.String,System.String,System.String)">
            <summary>Returns Text Between two other texts (first occurance of each).  Example: GetStringBetween("Test <b>Text</b>", "<b>", "</b>")</summary>
            <param name="Text">Text to Search</param>
            <param name="BetweenThis">Text to start after</param>
            <param name="AndThis">Text to stop at</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.AllIndexesOf(System.String,System.String)">
            <summary>Returns a List of the indexes of strFind in strBigString</summary>
            <param name="strBigString">The String to search</param>
            <param name="strFind">The String to find</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.ToTitleCase(System.String)">
            <summary>converts the string to Title Case</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.ToCamelCase(System.String)">
            <summary>converts the string to camel Case</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.ToReadableTimeItTookShortened(System.TimeSpan,System.Int32)">
            <summary>
            Turns a TimeSpan into a formatted String of the Elasped Time in the format: #y #d, #h, #m, #s, #i
            </summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.ToReadableTimeItTook(System.TimeSpan,System.Int32)">
            <summary>
            Turns a TimeSpan into a formatted String of the Elasped Time in the format: # Years, # Days, # Hours, # Minutes, # Seconds, # MiliSeconds
            </summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.StringsMatch(System.String,System.String,System.Boolean)">
            <summary>
            Returns True if String 1 Matches String 2 ( == ) optionally Matching Case
            </summary>
            <param name="s1">Strings to Test</param>
            <param name="s2">Strings to Test</param>
            <param name="MatchCase">True for case senitive match, false to ignore case</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.StringIsEmpty(System.String)">
            <summary>
            Returns True if String is Empty
            </summary>
            <param name="strText">String to Test</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.StringIsNotEmpty(System.String)">
            <summary>
            Returns True if String is NOT Empty
            </summary>
            <param name="strText">String to Test</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.GrabWordAtIndex(System.String,System.Int32)">
            <summary>Pass in words get back the #th word.  ex: ('WombatGestationPeriodIs30Days', 2) = 'Period'</summary>
            <param name="Words">Words, ex: HelloThereWombat or 'Hello There Wombat'</param>
            <param name="WordNumber">the index of the word you want ex: 2 returns There</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.AddSpacesToName(System.String)">
            <summary>Converts "HelloThereWombat" to "Hello There Wombat"</summary>
            <param name="sInput">Capitol Cased Word Seperated Value</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.Repeat(System.String,System.Int32)">
            <summary>Repeats the specified string the specified number of times</summary>
            <param name="StringToRepeat">String to repeat</param>
            <param name="NumberOfTimes">Number of times to repeat string</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.PhoneUnFormat(System.String)">
            <summary>PhoneUnFormat("(916) 555-1212 x0001") returns 91655512120001</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.PhoneFormat(System.String)">
            <summary>PhoneFormat("91655512120001") returns (916) 555-1212 x0001</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.FixQuote(System.Object,System.Int32,System.Boolean)">
            <summary>FixQuote is a SQL String cleaner, removes worries about ticks (') in SQL string data and allows a maximum length to be set </summary>
            <param name="objString">String to clean ticks (') from</param>
            <param name="intMaxLengthChop">If the string is longer than this then truncate it</param>
            <param name="ynForceSize">If true then pad the string to intMaxLengthChop characters (with spaces)</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.FixQuote(System.String,System.Int32,System.Boolean)">
            <summary>FixQuote is a SQL String cleaner, removes worries about ticks (') in SQL string data and allows a maximum length to be set </summary>
            <param name="strIn">String to clean ticks (') from</param>
            <param name="intMaxLengthChop">If the string is longer than this then truncate it</param>
            <param name="ynForceSize">If true then pad the string to intMaxLengthChop characters (with spaces)</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.FixDoubleQuote(System.String,System.Int32,System.Boolean)">
            <summary>Fix a Doublequote in a string to be a double doublequte</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.FixPath(System.String)">
            <summary>
            Appends a \ to the End of a String if it does not have one already
            </summary>
            <param name="PathIn">Text to append a \ </param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.FixWebPath(System.String)">
            <summary>
            Appends a / to the End of a String if it does not have one already
            </summary>
            <param name="PathIn">Text to append a / </param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.StringCount(System.String,System.String,System.Boolean)">
            <summary>Returns the number of occurances of text found</summary>
            <param name="Text">Text to search</param>
            <param name="Find">Text to find and count</param>
            <param name="IgnoreCase">Ignore Case</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.UCode(System.Int32)">
            <summary>Unicode Conversion</summary>
            <param name="i">For U+225F use Decimal 8799, or hex 0x225F (C#), &amp;H225F (VB) </param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.UCode(System.Char)">
            <summary>Unicode Conversion</summary>
            <param name="c">Pass in character to get the unicode decimal value of</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.ArrayRemoveEmpty(System.String[])">
            <summary>Removes the empty entries of a string array</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.ArraySafeCount(System.String[])">
            <summary>Removes the empty entries of a string array</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.IsOddNumber(System.Object)">
            <summary>Pass in a Number  Returns True if the number is ODD</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.IsEvenNumber(System.Object)">
            <summary> Pass in a Number  Returns True if the number is EVEN</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.Space(System.Int32)">
            <summary>Returns the number of spaces specified</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.Replace(System.String,System.String,System.String)">
            <summary>To replace the old method</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>/// Case insensitive version of String.Replace().</summary>
            <param name="s">String that contains patterns to replace</param>
            <param name="strFind">Pattern to find</param>
            <param name="strReplace">New pattern to replaces old</param>
            <param name="eCaseOption">String comparison type</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.Left(System.String,System.Int32)">
            <summary>To replace the old method</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.Right(System.String,System.Int32)">
            <summary>To replace the old method</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.EmailAdressesRemoveInValids(System.Collections.Generic.List{System.String})">
            <summary>Removes invalid entries from a list of supposed emails</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.IsValidEmail(System.String)">
            <summary>Pass in an email, returns true if it is a valid email address</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Strings.GetHtmlFromSite(System.String)">
            <summary>Returns the HTML of a web page on any site</summary>
            <param name="FullUrlSource">full url ex: https:\/\/www.sierraenergy.com\/calculator </param>
            <returns>the html from the source page.</returns>
        </member>
        <member name="T:Dry.Framework.Helpers.Crypt">
            <summary>Encryption and encoding helper class</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Crypt.BinaryFieldStringToValue(System.String)">
            <summary>From String to DT</summary>
            <param name="strHex">hex string to convert back to Value from a SQL Field of type image or binary or varbinary</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Crypt.BinaryFieldValueToString(System.Object)">
            <summary>From DT to String</summary>
            <param name="bin">Value from a SQL Field of type image or binary or varbinary</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Crypt.ConvertByteArrayToHex(System.Byte[])">
            <summary>Converts a byte array to a Hex String</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Crypt.ConvertHexToByteArray(System.String)">
            <summary>Converts a Hex string to a Byte array</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Crypt.GetHashBytes(System.String)">
            <summary>Converts a string of text to a hash value</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Crypt.GetHashString(System.String)">
            <summary>Converts a string of text to a hash value</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Crypt.SecuredHashAlgorithm1(System.String)">
            <summary>Converts a string of text to a secure hash value</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Crypt.MessageDigestAlgorithm5(System.String)">
            <summary>Converts a string of text to a MDA5 value</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Crypt.WmlsYWlyZXM(System.String)">
            <summary>
            Pipe Cryptographer
            </summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Crypt.ToSecureString(System.String@)">
            <summary>
            Converts a string of text into a Secured String
            </summary>
            <param name="str">String to convert and destroy</param>
            <remarks>Note: Clears the input variable</remarks>
        </member>
        <member name="M:Dry.Framework.Helpers.Crypt.ToSecureString(System.Byte[]@)">
            <summary>
            Converts an array of bytes into a Secured String
            </summary>
            <param name="aryBit">Array of bytes to convert and destroy</param>
            <returns>Secured String</returns>
            <remarks>Note: Clears the input variable</remarks>
        </member>
        <member name="M:Dry.Framework.Helpers.Crypt.EncryptDDES(System.String,System.String)">
            <summary>Dry's DES Encryption (DDES) </summary> 
            <example> 
                    Dim Keeper As New clsCrypt
            
                    Dim strText As String = ""
                    Dim strPass As String = ""
                    Dim strTextE As String = ""
                    Dim strTextD As String = ""
                    Dim strTextB As String = ""
            
                    strText = InputBox("Enter Text", "Text To Encrypt", "Once upon a time in Norway, a tree was born into the earth.") 
                    If strText = "" Then Return
            
                    strPass = InputBox("Enter Password", "Encrypt Text with Password", "Password") 
            
                    strTextE = Keeper.EncryptDDES(strText, strPass)
            
                    strTextD = Keeper.DecryptDDES(strTextE, strPass)
            
                    Try
            
                        strTextB = Keeper.DecryptDDES(strTextE, strPass + "x")
            
                    Catch ex As System.Security.Cryptography.CryptographicException
            
                        msgErrorUnknown("You entered an incorrect password")
            
                    Catch ex As Exception
            
                        msgErrorUnknown(ex.TargetSite.Name, ex)
            
                    End Try
            
                    Qwert("Your Text = " + strText)
                    Qwert("Password  = " + strPass)
                    Qwert("Encrypted = " + strTextE)
                    Qwert("Decrypted = " + strTextD)
                    Qwert("Bad Passw = " + strTextB)
            
                    DoEvents()
            
            </example> 
            <param name="strText">The text you wish to be encrypted/decrypted</param> 
            <param name="strPW">The Password to encrypt the text with</param> 
            <returns> 
            Encrypted Text in a String
            </returns> 
            <remarks> 
            The String is Encrypted via a TripleDES algorithm but due to Bit loss I also implemented a Base64 Encoded wraper
            </remarks> 
        </member>
        <member name="M:Dry.Framework.Helpers.Crypt.DecryptDDES(System.String,System.String)">
            <summary> Dry's DES Decryption (DDES)</summary> 
            <example> 
                    Dim Keeper As New clsCrypt
            
                    Dim strText As String = ""
                    Dim strPass As String = ""
                    Dim strTextE As String = ""
                    Dim strTextD As String = ""
                    Dim strTextB As String = ""
            
                    strText = InputBox("Enter Text", "Text To Encrypt", "Once upon a time in Norway, a tree was born into the earth.") 
                    If strText = "" Then Return
            
                    strPass = InputBox("Enter Password", "Encrypt Text with Password", "Password") 
                    strTextE = Keeper.EncryptDDES(strText, strPass)
                    strTextD = Keeper.DecryptDDES(strTextE, strPass)
            
                    Try
                        strTextB = Keeper.DecryptDDES(strTextE, strPass + "x")
                    Catch ex As System.Security.Cryptography.CryptographicException
                        msgErrorUnknown("You entered an incorrect password")
                    Catch ex As Exception
                        msgErrorUnknown(ex.TargetSite.Name, ex)
                    End Try
            
                    Qwert("Your Text = " + strText)
                    Qwert("Password  = " + strPass)
                    Qwert("Encrypted = " + strTextE)
                    Qwert("Decrypted = " + strTextD)
                    Qwert("Bad Passw = " + strTextB)
            
                    DoEvents()
            
            </example> 
            <param name="strText">The text you wish to be decrypted</param> 
            <param name="strPW">The Password to decrypt the text with</param> 
            <returns> 
            Decrypted Text in a String
            </returns> 
            <remarks> 
            The String is Decrypted from Base64  (due to Bit loss) then a TripleDES algorithm
            </remarks> 
        </member>
        <member name="M:Dry.Framework.Helpers.Crypt.EncodeUUE(System.String)">
            <summary>Dry's DES Encryption (DDES)</summary> 
            <example> 
            
                    Dim Keeper As New clsCrypt
            
                    Dim strText As String = ""
                    Dim strTextB As String = ""
            
                    Try
            
                        strText = InputBox("Enter Text", "Text To Encrypt", "Once upon a time in Norway, a tree was born into the earth.") : If strText = "" Then Return
            
                        Qwert("YOUR TEXT  = " + strText)
            
                        strTextB = Keeper.EncodeUUE(strText)
            
                        Qwert("ENCRYPT 64 = " + strTextB)
            
                        Qwert("DECRYPT 64 = " + Keeper.DecodeUUE(strTextB))
            
                    Catch ex As Exception
            
                        msgErrorUnknown(ex.TargetSite.Name, ex)
            
                    End Try
            
            
                    DoEvents()
            </example> 
            <param name="strText">The text you wish to be encrypted</param> 
            <returns> Encrypted Text in a String</returns> 
            <remarks> 
            The String is Encrypted into Base64/UUE Encoding
            </remarks> 
        </member>
        <member name="M:Dry.Framework.Helpers.Crypt.DecodeUUE(System.String)">
            <summary>Dry's DES Decryption (DDES)</summary> 
            <example> 
            
                    Dim Keeper As New clsCrypt
            
                    Dim strText As String = ""
                    Dim strTextB As String = ""
            
                    Try
            
                        strText = InputBox("Enter Text", "Text To Encrypt", "Once upon a time in Norway, a tree was born into the earth.") : If strText = "" Then Return
            
                        Qwert("YOUR TEXT  = " + strText)
            
                        strTextB = Keeper.EncodeUUE(strText)
            
                        Qwert("ENCRYPT 64 = " + strTextB)
            
                        Qwert("DECRYPT 64 = " + Keeper.DecodeUUE(strTextB))
            
                    Catch ex As Exception
            
                        msgErrorUnknown(ex.TargetSite.Name, ex)
            
                    End Try
            
            
                    DoEvents()
            </example> 
            <param name="strBase64">The text you wish to be decrypted</param> 
            <returns>Decrypted Text in a String</returns> 
            <remarks> 
            The String is Decrypted from Base64/UUE Encoding
            </remarks> 
        </member>
        <member name="M:Dry.Framework.Helpers.Crypt.DryHexx(System.String,System.Boolean)">
            <summary>
            Turns a string into Hexidecimal Encoding or reverses encoding
            </summary>
            <param name="strIn">String to be hexed or unhexed</param>
            <param name="ynUnHexx">True to Decrypt, False to Encrypt</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Crypt.AESRijndaelEncrypt(System.String,System.String)">
            <summary>Performs a Rijndael AES with Cipher Block Chaining including a SHA256 hash on the password</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Crypt.AESRijndaelDecrypt(System.String,System.String)">
            <summary>Reverses a Rijndael AES with Cipher Block Chaining including a SHA256 hash on the password</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Crypt.IsEqual(System.Security.SecureString,System.Security.SecureString)">
            <summary>
            Determines whether the specified <see cref="T:System.Security.SecureString">System.Security.SecureString</see> instances are considered equal.
            </summary>
            <param name="sstValueA">The first <see cref="T:System.Security.SecureString">System.Security.SecureString</see> to compare.</param>
            <param name="sstValueB">The second <see cref="T:System.Security.SecureString">System.Security.SecureString</see> to compare.</param>
            <returns>True if valueA is equal to valueB; otherwise, False.</returns>
            <remarks>Comparison loop based on Microsoft souce code for String.EqualsHelper method.</remarks>
        </member>
        <member name="M:Dry.Framework.Helpers.Crypt.Ordinalification(System.String)">
            <summary>Converts each character into ascii values and adds the ordinal position</summary>
            <param name="strToOrdinalify">String of text to attempt to convert to a unique long</param>
        </member>
        <member name="T:Dry.Framework.Helpers.Files">
            <summary>File Helper</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Files.OpenFileWithItsAssociation(System.String)">
            <summary>Launch file like double clicking it in explorer</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Files.OpenFileInNotepad(System.String)">
            <summary>Launch notepad with this file as the argument</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Files.OpenFileInNotepad2(System.String)">
            <summary>Launch notepad2 with this file as the argument</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Files.ExportHTMLWithStyle(System.Data.DataTable,System.String,Dry.Framework.Options.HTMLOutputOptions)">
             <summary>
             Converts a DataTable full of records into a Table of an HTML File, adding a Simple Style to it
             </summary>
             <param name="dtTable">a DataTable with one or More columns and one or more Rows</param>
             <param name="strLocation">The Full path and Filename of the HTML file to create</param>
            <param name="Options">Optional HTML Options</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Files.TemporaryFileCreateAndReturnFileName(System.String)">
            <summary>Creates a Temporary file and returns the new filename</summary>
            <param name="Extention">Optionally Specify the Extention ex: ".html"</param>
        </member>
        <member name="M:Dry.Framework.Helpers.Files.GenerateImageFromHTML(System.String,System.Int32,System.Int32)">
            <summary>Converts HTML to an image of it rendered in an ie window. <para>ex: GenerateImageFromHTML(strHTML, -1, -1).Save("thumbnail.png", System.Drawing.Imaging.ImageFormat.Png)</para></summary>
            <param name="HTML">string of html code</param>
            <param name="width">width of window. -1 for auto width</param>
            <param name="height">height of window. -1 for auto height</param>
            <returns>GenerateImageFromHTML</returns>
        </member>
        <member name="T:Dry.Framework.Helpers.DebugTime">
            <summary>To use this class use a using block around the code you want to measure</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.DebugTime.Action">
            <summary>Action performing</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.DebugTime.#ctor(System.String)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.DebugTime.Dispose(System.Boolean)">
            <summary>Disposes internal objects</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.DebugTime.Dispose">
            <summary>Disposes internal objects</summary>
        </member>
        <member name="T:Dry.Framework.Helpers.ProgressionEventHandler">
            <summary>Progression Delegate</summary>
        </member>
        <member name="T:Dry.Framework.Helpers.ProgressionDelegate">
            <summary>Progression Delegate</summary>
        </member>
        <member name="T:Dry.Framework.Helpers.ProgressEventArgs">
            <summary>Progress event args</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.ProgressEventArgs.mTotal">
            <summary>Total Number of Items</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.ProgressEventArgs.mCurrent">
            <summary>Current Item being Processed</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.ProgressEventArgs.CanCancel">
            <summary>If true then consumer can set Cancel = True to abort process</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.ProgressEventArgs.Cancel">
            <summary>If CanCancel = True then Setting Cancel = True will Abort the Process</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.ProgressEventArgs.mPerformance">
            <summary>Optional Performance object. May be Nothing (null)</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.ProgressEventArgs.Action">
            <summary>Optional Current Action to report to user</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.ProgressEventArgs.Performance">
            <summary>Optional Performance object. May be Nothing (null)</summary>   
        </member>
        <member name="P:Dry.Framework.Helpers.ProgressEventArgs.Total">
            <summary>Total Number of Items</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.ProgressEventArgs.Current">
            <summary>Current Item being Processed</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.ProgressEventArgs.#ctor">
            <summary>Creates a new instance of the ProgressEventArgs class</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.ProgressEventArgs.#ctor(System.Int64,System.Int64)">
            <summary>Creates a new instance of the ProgressEventArgs class</summary>
            <param name="lngTotalCount">Total Number of Items</param>
            <param name="lngCurrentItem">Current Item being Processed</param>
        </member>
        <member name="M:Dry.Framework.Helpers.ProgressEventArgs.#ctor(System.Int64,System.Int64,Dry.Framework.Helpers.Performance@)">
            <summary>Creates a new instance of the ProgressEventArgs class</summary>
            <param name="lngTotalCount">Total Number of Items</param>
            <param name="lngCurrentItem">Current Item being Processed</param>
            <param name="PerfObject">Performance Object for tracking/reporting length of time. May be Nothing (null)</param>
        </member>
        <member name="M:Dry.Framework.Helpers.ProgressEventArgs.#ctor(System.Int64,System.Int64,Dry.Framework.Helpers.Performance@,System.Boolean)">
            <summary>Creates a new instance of the ProgressEventArgs class</summary>
            <param name="lngTotalCount">Total Number of Items</param>
            <param name="lngCurrentItem">Current Item being Processed</param>
            <param name="PerfObject">Performance Object for tracking/reporting length of time. May be Nothing (null)</param>
            <param name="UserCanCancel"></param>
        </member>
        <member name="M:Dry.Framework.Helpers.ProgressEventArgs.#ctor(System.Int64,System.Int64,Dry.Framework.Helpers.Performance@,System.Boolean,System.String)">
            <summary>Creates a new instance of the ProgressEventArgs class</summary>
            <param name="lngTotalCount">Total Number of Items</param>
            <param name="lngCurrentItem">Current Item being Processed</param>
            <param name="PerfObject">Performance Object for tracking/reporting length of time. May be Nothing (null)</param>
            <param name="UserCanCancel">If true then consumer can set Cancel = True to abort process</param>
            <param name="strAction">Current Action to report to user. ex. "Loading records..."</param>
        </member>
        <member name="T:Dry.Framework.Helpers.Performance">
            <summary>Performance Class</summary>
            <remarks>For basic use Call MarkStarted, set the ItemsProcessed and ItemsTotalProcessed and call the various methods after calling MarkStopped</remarks>
        </member>
        <member name="E:Dry.Framework.Helpers.Performance.Progression">
            <summary>Progression Event</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.Performance.CanCancel">
            <summary>Informs User of the ability to use the HasCanceled Flag to stop the Process</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.Performance.HasCanceled">
            <summary>Informs Procedure to stop the Process if supported (see CanCancel)</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.Performance.SuppressEvents">
            <summary>Supress events</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.Performance.Modulus">
            <summary>Divisor for Progression Raise.</summary>
            <value>1 = Every increment, 10 = Fire every (PercentCompleted MOD 10) = 0</value>
            <remarks>Does nothing if SuppressEvents is True</remarks>
        </member>
        <member name="M:Dry.Framework.Helpers.Performance.Action(System.String)">
            <summary>Invokes the Progresion Event passing the Action with it </summary>
            <param name="strAction">Message to pass to parent</param>
            <remarks>This method will do nothing if SuppressEvents is True</remarks>
        </member>
        <member name="M:Dry.Framework.Helpers.Performance.ActionIncrement(System.String)">
            <summary>Invokes the Progresion Event passing the Action with it Also Incrementing ItemsProcessed by 1</summary>
            <param name="strAction">Message to pass to parent</param>
            <remarks>This method will do nothing if SuppressEvents is True</remarks>
        </member>
        <member name="M:Dry.Framework.Helpers.Performance.Action(System.String,System.Int64)">
            <summary>Updates the ItemsProcessed and Invokes the Progresion Event passing the Action with it </summary>
            <param name="strAction">Message to pass to parent</param>
            <param name="lngCurrent">Set the ItemsProcessed before raiseing the event</param>
            <remarks>This method will do nothing if SuppressEvents is True</remarks>
        </member>
        <member name="P:Dry.Framework.Helpers.Performance.StartedString">
            <summary>Gets a String formatted for Display of the Date and Time of MarkStarted</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.Performance.StoppedString">
            <summary>Gets a String formatted for Display of the Date and Time of MarkStopped</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.Performance.Started">
            <summary>Gets a Date of the Date and Time of MarkStarted</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.Performance.Stopped">
            <summary>Gets a Date of the Date and Time of MarkStopped</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Performance.MarkStarted">
            <summary>Sets the Started Date/Time to Current Date/Time</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Performance.MarkStopped">
            <summary>Sets the Stopped Date/Time to Current Date/Time</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.Performance.ItemsProcessed">
            <summary>Gets or Sets the Current Number of Items processed. if less than TotalItemsProcessed then the event Progression is raised.</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.Performance.ItemsTotalProcessed">
            <summary>Gets or Sets the Total Number of Items that are going to be processed</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.Performance.TotalSeconds">
            <summary>Gets the Number of TotalSeconds Between Stop and Started</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.Performance.TotalMinutes">
            <summary>Gets the Number of TotalMinutes Between Stop and Started</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.Performance.TotalHours">
            <summary>Gets the Number of Total Hours Between Stop and Started</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.Performance.TotalDays">
            <summary>Gets the Number of Total Days Between Stop and Started</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.Performance.TotalYears">
            <summary>Gets the Number of TotalYears Between Stop and Started</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.Performance.Span">
            <summary>Gets the TimeSpan Between Stop and Started</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.Performance.ProcessedCompletion">
            <summary>Gets the Number of Items Divided by the Total Items</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.Performance.ProcessedPercent">
            <summary>Gets the Number of Items Divided by the Total Items Multiplied by 100</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.Performance.ProcessedPerSecond">
            <summary>Gets the Number of Items Divided by the Total Seconds</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.Performance.ProcessedPerMinutes">
            <summary>Gets the Number of Items Divided by the Total Minutes</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Performance.ToProcessedPerSeconds(System.String)">
            <summary>Gets a Formatted Number of Items Per Second</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Performance.ToProcessedPerMinutes(System.String)">
            <summary>Gets a Formatted Number of Items Per Minute</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Performance.ToReadableTimeRemaining">
            <summary>Gets an Estimated Time remaining</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Performance.ToElaspsedTime">
            <summary>
            Gets a formatted String of the Elasped Time in Days;Hours:Minutes:Seconds.MiliSeconds
            </summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Performance.ToReadableTimeItTook">
            <summary>
            Gets a formatted String of the Elasped Time in the format: # Days, # Hours, # Minutes, # Seconds, # MiliSeconds
            </summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Performance.ToEventArgs">
            <summary>Create an Event args object</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Performance.ToString">
            <summary>Gets ToReadableTimeItTook</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Performance.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Performance.#ctor(System.Boolean)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Performance.#ctor(System.Boolean,System.Int64)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.Performance.#ctor(System.Boolean,System.Int64,System.Int32,System.Boolean)">
            <summary>Constructor</summary>
        </member>
        <member name="T:Dry.Framework.Helpers.DryCollectionBase">
            <summary>Base Collection object of IDryViewable</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.DryCollectionBase.List">
            <summary>get the items contained in the list</summary>
        </member>
        <member name="E:Dry.Framework.Helpers.DryCollectionBase.ItemAdded">
            <summary>event fires when an item is added to the list</summary>
        </member>
        <member name="T:Dry.Framework.Helpers.DryCollectionBase.ItemAddedEventHandler">
            <summary>ItemAdded delegate</summary>
            <param name="Item">The item that was added</param>
        </member>
        <member name="E:Dry.Framework.Helpers.DryCollectionBase.DataChanged">
            <summary>Event fires when data changes</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.#ctor(Dry.Framework.Helpers.DryCollectionBase)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.#ctor(Dry.Framework.IDryViewable)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.#ctor(Dry.Framework.IDryViewable[])">
            <summary>Constructor</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.#ctor(System.Collections.Generic.List{Dry.Framework.IDryViewable})">
            <summary>Constructor</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.DryCollectionBase.Item(System.String)">
            <summary>The current instance</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.DryCollectionBase.Item(System.Int32)">
            <summary>The current instance</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.DryCollectionBase.Count">
            <summary>get the number of items in the list</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.SwapItems(System.Int32,System.Int32)">
            <summary>Swaps the Index Positions of 2 Items in the Collection.  Warning your Object must implement ICloneable or an error occures</summary>
            <param name="intFromIndex">First Object to move into Second place</param>
            <param name="intToIndex">Second Object to move into first place</param>
            <exception cref="T:System.NotSupportedException">If The Item Class does not Implement ICloneable</exception>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.Add(Dry.Framework.IDryViewable)">
            <summary>Add an item into the list</summary>
            <param name="dryItem">Item to add</param>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.AddRange(Dry.Framework.IDryViewable[])">
            <summary>Add the items in an array into the list</summary>
            <param name="dryArray">Items to add</param>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.AddRange(System.Collections.ObjectModel.Collection{Dry.Framework.IDryViewable})">
            <summary>Adds the items in a collection into the list</summary>
            <param name="dcb">collection of items to add to the list</param>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.CopyTo(Dry.Framework.IDryViewable[],System.Int32)">
            <summary>Adds the items in an array into the list</summary>
            <param name="dryArray">array of items to add</param>
            <param name="intIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.IndexOf(Dry.Framework.IDryViewable)">
            <summary>Adds an item into the list</summary>
            <param name="dryItem">Item to add</param>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.Contains(Dry.Framework.IDryViewable)">
            <summary>Determines whether the item contains a specific value</summary>
            <param name="dryItem">The object to locate in the list</param>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.Insert(System.Int32,Dry.Framework.IDryViewable)">
            <summary>Add an item into the list</summary>
            <param name="intIndex">The zero-based index at which item should be inserted</param>
            <param name="dryItem">The object to add</param>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.Remove(Dry.Framework.IDryViewable)">
            <summary>Removes an item from the list</summary>
            <param name="dryItem">Item to remove</param>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.GetEnumerator">
            <summary>gets the enumerator</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.ToString">
            <summary>Returns the ToString of each item seperated by NewLine</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.ToArray">
            <summary>Returns an array of the items in the list</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.FindItem(System.Int32)">
            <summary>Find the Item in the collection by Primary Key</summary>
            <param name="intPrimaryKey">Primary Key of the Item to Return (Nothing is returned if the item is not found)</param>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.FindItem(System.String)">
            <summary>Find the Item in the collection by Unique Find Field</summary>
            <param name="strFindField">Unique Find Field of the Item to Return (Nothing is returned if the item is not found)</param>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.FindItem(System.String,System.Int32)">
            <summary>
            Find the Item in the collection by The ToString Method
            </summary>
            <param name="strToString">ToString of the Item to Return (Nothing is returned if the item is not found)</param>
            <param name="intIndex">Zero Based Ordinal of the Item to return. ex ("Dry",2) Returns the 3rd Item With Dry in ToString</param>
        </member>
        <member name="T:Dry.Framework.Helpers.DryCollectionBase.DryItemEnumerator">
            <summary>Enumerator for DryCollectionBase</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.DryItemEnumerator.#ctor(Dry.Framework.Helpers.DryCollectionBase)">
            <summary>Constructor</summary>
            <param name="dryMappings"></param>
        </member>
        <member name="P:Dry.Framework.Helpers.DryCollectionBase.DryItemEnumerator.Current">
            <summary>get the current</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.DryCollectionBase.DryItemEnumerator.System_Collections_IEnumerator_Current">
            <summary>get the current item in the collection</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.DryCollectionBase.DryItemEnumerator.System#Collections#IEnumerator#Current">
            <summary>get the current item in the collection</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.DryItemEnumerator.MoveNext">
            <summary>Advance the enumerator to the next item</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.DryItemEnumerator.System_Collections_IEnumerator_MoveNext">
            <summary>moves to the next item</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.DryItemEnumerator.System#Collections#IEnumerator#MoveNext">
            <summary>moves to the next item</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.DryItemEnumerator.Reset">
            <summary>sets the enumerator to the first item</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.DryItemEnumerator.System_Collections_IEnumerator_Reset">
            <summary>sets the enumerator to the first item</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.DryItemEnumerator.System#Collections#IEnumerator#Reset">
            <summary>reset the enumerator</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.DryCollectionBase.InnerSort">
            <summary>Sorts the Collection by the Item Class's CompareTo.</summary>
        </member>
        <member name="T:Dry.Framework.Helpers.KeyMod">
            <summary>Keyboard Modifier keys</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.KeyMod.CTL">
            <summary>Control Key is Pressed</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.KeyMod.ALT">
            <summary>Alt Key is Pressed</summary>
        </member>
        <member name="P:Dry.Framework.Helpers.KeyMod.SHT">
            <summary>Shift Key is Pressed</summary>
        </member>
        <member name="T:Dry.Framework.Helpers.TimeZoneUtil">
            <summary>Time Zone Utility Class</summary>
        </member>
        <member name="T:Dry.Framework.Helpers.TimeZoneUtil.TimeZones">
            <summary>Because Microsoft is not smart enough to give you this.</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.DatelineStandardTime">
            <summary>(UTC-12:00) International Date Line West</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.UTC11">
            <summary>(UTC-11:00) Coordinated Universal Time-11</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.HawaiianStandardTime">
            <summary>(UTC-10:00) Hawaii</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.AlaskanStandardTime">
            <summary>(UTC-09:00) Alaska</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.PacificStandardTimeMexico">
            <summary>(UTC-08:00) Baja California</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.PacificStandardTime">
            <summary>(UTC-08:00) Pacific Time (US and Canada)</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.USMountainStandardTime">
            <summary>(UTC-07:00) Arizona</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.MountainStandardTimeMexico">
            <summary>(UTC-07:00) Chihuahua, La Paz, Mazatlan</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.MountainStandardTime">
            <summary>(UTC-07:00) Mountain Time (US and Canada)</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.CentralAmericaStandardTime">
            <summary>(UTC-06:00) Central America</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.CentralStandardTime">
            <summary>(UTC-06:00) Central Time (US and Canada)</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.CentralStandardTimeMexico">
            <summary>(UTC-06:00) Guadalajara, Mexico City, Monterrey</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.CanadaCentralStandardTime">
            <summary>(UTC-06:00) Saskatchewan</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.SAPacificStandardTime">
            <summary>(UTC-05:00) Bogota, Lima, Quito, Rio Branco</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.EasternStandardTimeMexico">
            <summary>(UTC-05:00) Chetumal</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.EasternStandardTime">
            <summary>(UTC-05:00) Eastern Time (US and Canada)</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.USEasternStandardTime">
            <summary>(UTC-05:00) Indiana (East)</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.VenezuelaStandardTime">
            <summary>(UTC-04:30) Caracas</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.ParaguayStandardTime">
            <summary>(UTC-04:00) Asuncion</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.AtlanticStandardTime">
            <summary>(UTC-04:00) Atlantic Time (Canada)</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.CentralBrazilianStandardTime">
            <summary>(UTC-04:00) Cuiaba</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.SAWesternStandardTime">
            <summary>(UTC-04:00) Georgetown, La Paz, Manaus, San Juan</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.NewfoundlandStandardTime">
            <summary>(UTC-03:30) Newfoundland</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.ESouthAmericaStandardTime">
            <summary>(UTC-03:00) Brasilia</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.ArgentinaStandardTime">
            <summary>(UTC-03:00) Buenos Aires</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.SAEasternStandardTime">
            <summary>(UTC-03:00) Cayenne, Fortaleza</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.GreenlandStandardTime">
            <summary>(UTC-03:00) Greenland</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.MontevideoStandardTime">
            <summary>(UTC-03:00) Montevideo</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.BahiaStandardTime">
            <summary>(UTC-03:00) Salvador</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.PacificSAStandardTime">
            <summary>(UTC-03:00) Santiago</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.UTC02">
            <summary>(UTC-02:00) Coordinated Universal Time-02</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.MidAtlanticStandardTime">
            <summary>(UTC-02:00) Mid-Atlantic - Old</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.AzoresStandardTime">
            <summary>(UTC-01:00) Azores</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.CaboVerdeStandardTime">
            <summary>(UTC-01:00) Cabo Verde Is.</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.MoroccoStandardTime">
            <summary>(UTC) Casablanca</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.CoordinatedUniversalTime">
            <summary>(UTC) Coordinated Universal Time</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.GMTStandardTime">
            <summary>(UTC) Dublin, Edinburgh, Lisbon, London</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.GreenwichStandardTime">
            <summary>(UTC) Monrovia, Reykjavik</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.WEuropeStandardTime">
            <summary>(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.CentralEuropeStandardTime">
            <summary>(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.RomanceStandardTime">
            <summary>(UTC+01:00) Brussels, Copenhagen, Madrid, Paris</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.CentralEuropeanStandardTime">
            <summary>(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.WCentralAfricaStandardTime">
            <summary>(UTC+01:00) West Central Africa</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.NamibiaStandardTime">
            <summary>(UTC+01:00) Windhoek</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.JordanStandardTime">
            <summary>(UTC+02:00) Amman</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.GTBStandardTime">
            <summary>(UTC+02:00) Athens, Bucharest</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.MiddleEastStandardTime">
            <summary>(UTC+02:00) Beirut</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.EgyptStandardTime">
            <summary>(UTC+02:00) Cairo</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.SyriaStandardTime">
            <summary>(UTC+02:00) Damascus</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.EEuropeStandardTime">
            <summary>(UTC+02:00) E. Europe</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.SouthAfricaStandardTime">
            <summary>(UTC+02:00) Harare, Pretoria</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.FLEStandardTime">
            <summary>(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.TurkeyStandardTime">
            <summary>(UTC+02:00) Istanbul</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.JerusalemStandardTime">
            <summary>(UTC+02:00) Jerusalem</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.RussiaTZ1StandardTime">
            <summary>(UTC+02:00) Kaliningrad (RTZ 1)</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.LibyaStandardTime">
            <summary>(UTC+02:00) Tripoli</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.ArabicStandardTime">
            <summary>(UTC+03:00) Baghdad</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.ArabStandardTime">
            <summary>(UTC+03:00) Kuwait, Riyadh</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.BelarusStandardTime">
            <summary>(UTC+03:00) Minsk</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.RussiaTZ2StandardTime">
            <summary>(UTC+03:00) Moscow, St. Petersburg, Volgograd (RTZ 2)</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.EAfricaStandardTime">
            <summary>(UTC+03:00) Nairobi</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.IranStandardTime">
            <summary>(UTC+03:30) Tehran</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.ArabianStandardTime">
            <summary>(UTC+04:00) Abu Dhabi, Muscat</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.AzerbaijanStandardTime">
            <summary>(UTC+04:00) Baku</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.RussiaTZ3StandardTime">
            <summary>(UTC+04:00) Izhevsk, Samara (RTZ 3)</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.MauritiusStandardTime">
            <summary>(UTC+04:00) Port Louis</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.GeorgianStandardTime">
            <summary>(UTC+04:00) Tbilisi</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.CaucasusStandardTime">
            <summary>(UTC+04:00) Yerevan</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.AfghanistanStandardTime">
            <summary>(UTC+04:30) Kabul</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.WestAsiaStandardTime">
            <summary>(UTC+05:00) Ashgabat, Tashkent</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.RussiaTZ4StandardTime">
            <summary>(UTC+05:00) Ekaterinburg (RTZ 4)</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.PakistanStandardTime">
            <summary>(UTC+05:00) Islamabad, Karachi</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.IndiaStandardTime">
            <summary>(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.SriLankaStandardTime">
            <summary>(UTC+05:30) Sri Jayawardenepura</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.NepalStandardTime">
            <summary>(UTC+05:45) Kathmandu</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.CentralAsiaStandardTime">
            <summary>(UTC+06:00) Astana</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.BangladeshStandardTime">
            <summary>(UTC+06:00) Dhaka</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.RussiaTZ5StandardTime">
            <summary>(UTC+06:00) Novosibirsk (RTZ 5)</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.MyanmarStandardTime">
            <summary>(UTC+06:30) Yangon (Rangoon)</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.SEAsiaStandardTime">
            <summary>(UTC+07:00) Bangkok, Hanoi, Jakarta</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.RussiaTZ6StandardTime">
            <summary>(UTC+07:00) Krasnoyarsk (RTZ 6)</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.ChinaStandardTime">
            <summary>(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.RussiaTZ7StandardTime">
            <summary>(UTC+08:00) Irkutsk (RTZ 7)</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.MalayPeninsulaStandardTime">
            <summary>(UTC+08:00) Kuala Lumpur, Singapore</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.WAustraliaStandardTime">
            <summary>(UTC+08:00) Perth</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.TaipeiStandardTime">
            <summary>(UTC+08:00) Taipei</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.UlaanbaatarStandardTime">
            <summary>(UTC+08:00) Ulaanbaatar</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.TokyoStandardTime">
            <summary>(UTC+09:00) Osaka, Sapporo, Tokyo</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.KoreaStandardTime">
            <summary>(UTC+09:00) Seoul</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.RussiaTZ8StandardTime">
            <summary>(UTC+09:00) Yakutsk (RTZ 8)</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.CenAustraliaStandardTime">
            <summary>(UTC+09:30) Adelaide</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.AUSCentralStandardTime">
            <summary>(UTC+09:30) Darwin</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.EAustraliaStandardTime">
            <summary>(UTC+10:00) Brisbane</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.AUSEasternStandardTime">
            <summary>(UTC+10:00) Canberra, Melbourne, Sydney</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.WestPacificStandardTime">
            <summary>(UTC+10:00) Guam, Port Moresby</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.TasmaniaStandardTime">
            <summary>(UTC+10:00) Hobart</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.MagadanStandardTime">
            <summary>(UTC+10:00) Magadan</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.RussiaTZ9StandardTime">
            <summary>(UTC+10:00) Vladivostok, Magadan (RTZ 9)</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.RussiaTZ10StandardTime">
            <summary>(UTC+11:00) Chokurdakh (RTZ 10)</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.CentralPacificStandardTime">
            <summary>(UTC+11:00) Solomon Is., New Caledonia</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.RussiaTZ11StandardTime">
            <summary>(UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky (RTZ 11)</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.NewZealandStandardTime">
            <summary>(UTC+12:00) Auckland, Wellington</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.UTC12">
            <summary>(UTC+12:00) Coordinated Universal Time+12</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.FijiStandardTime">
            <summary>(UTC+12:00) Fiji</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.KamchatkaStandardTime">
            <summary>(UTC+12:00) Petropavlovsk-Kamchatsky - Old</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.TongaStandardTime">
            <summary>(UTC+13:00) Nuku'alofa</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.SamoaStandardTime">
            <summary>(UTC+13:00) Samoa</summary>
        </member>
        <member name="F:Dry.Framework.Helpers.TimeZoneUtil.TimeZones.LineIslandsStandardTime">
            <summary>(UTC+14:00) Kiritimati Island</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.TimeZoneUtil.TimeZoneNameToEnum(System.String)">
            <summary>Name to Enum (you can pass in StandardName or DisplayName)</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.TimeZoneUtil.TimeZoneFromEnum(Dry.Framework.Helpers.TimeZoneUtil.TimeZones)">
            <summary>Get TimeZoneInfo object from enum value</summary>
        </member>
        <member name="M:Dry.Framework.Helpers.TimeZoneUtil.Convert(System.DateTime,Dry.Framework.Helpers.TimeZoneUtil.TimeZones,Dry.Framework.Helpers.TimeZoneUtil.TimeZones)">
            <summary>Convert date between timezones</summary>
            <param name="dtmSource">Source Date</param>
            <param name="eSourceZone">Source Date Zone</param>
            <param name="eDestinationZone">Destination Date Zone</param>
            <returns>Destination Date</returns>
        </member>
        <member name="M:Dry.Framework.Helpers.TimeZoneUtil.SetDatesToUTC``1(``0,Dry.Framework.Helpers.TimeZoneUtil.TimeZones)">
            <summary>Sets all the Date Properties of a table abstract class to UTC time from the local time. ex: TimeZoneUtil.SetDatesToUTC&lt;Auction&gt;(AuctionObjFromUser, TimeZones.PacificStandardTime);</summary>
            <typeparam name="T">Object type</typeparam>
            <param name="UserInputObject">Object Instance</param>
            <param name="eFromZone">convert all dates on object from eFromZone to UTC</param>
        </member>
        <member name="M:Dry.Framework.Helpers.TimeZoneUtil.SetDatesToUTC``1(System.Collections.Generic.List{``0},Dry.Framework.Helpers.TimeZoneUtil.TimeZones)">
            <summary>Sets all the Date Properties of all table abstract class's in the list to UTC time from the local time. ex: TimeZoneUtil.SetDatesToUTC&lt;Auction&gt;(AuctionObjFromUser, TimeZones.PacificStandardTime);</summary>
            <typeparam name="T">Object type</typeparam>
            <param name="UserInputObject">Object Instance</param>
            <param name="eFromZone">convert all dates on object from eFromZone to UTC</param>
        </member>
        <member name="M:Dry.Framework.Helpers.TimeZoneUtil.SetDatesToLocal``1(``0,Dry.Framework.Helpers.TimeZoneUtil.TimeZones)">
            <summary>Sets all the Date Properties of a table abstract class to local time from the UTC time. ex: TimeZoneUtil.SetDatesToLocal&lt;Auction&gt;(AuctionObjForUser, TimeZones.PacificStandardTime);</summary>
            <typeparam name="T">Object type</typeparam>
            <param name="UserInputObject">Object instance</param>
            <param name="eToLocalZone">convert all dates on object from UTC to eToLocalZone</param>
        </member>
        <member name="M:Dry.Framework.Helpers.TimeZoneUtil.SetDatesToLocal``1(System.Collections.Generic.List{``0},Dry.Framework.Helpers.TimeZoneUtil.TimeZones)">
            <summary>Sets all the Date Properties of all table abstract class's to local time from the utc time. ex: TimeZoneUtil.SetDatesToLocal&lt;Auction&gt;(AuctionObjForUser, TimeZones.PacificStandardTime);</summary>
            <typeparam name="T">Object type</typeparam>
            <param name="UserInputObject">Object instance</param>
            <param name="eToLocalZone">convert all dates on object from UTC to eToLocalZone</param>
        </member>
        <member name="T:Dry.Framework.IEngineDictionary">
            <summary>Dictionary Lookup Class</summary>
        </member>
        <member name="M:Dry.Framework.IEngineDictionary.GetValue(System.String)">
            <summary>Returns a string from a dictionary lookup ( use SIG.Utility.DictionaryKeys.[const] )</summary>
        </member>
        <member name="M:Dry.Framework.IEngineDictionary.GetUrl(System.Int32)">
            <summary>Returns a url from umbraco lookup</summary>
        </member>
        <member name="M:Dry.Framework.IEngineDictionary.RenderPartialToPDFAndSaveToDatabase(System.String,System.String,System.Object)">
            <summary>Renders a partial view with the model supplied, then saves the pdf to the Attachment table andreturns the Attachment object</summary>
        </member>
        <member name="T:Dry.Framework.IEngineEmail">
            <summary>Engine Email Class</summary>
        </member>
        <member name="P:Dry.Framework.IEngineEmail.EmailFrom">
            <summary>Sierra energy email</summary>
        </member>
        <member name="P:Dry.Framework.IEngineEmail.EmailFromDisplayName">
            <summary>Sierra energy display name</summary>
        </member>
        <member name="M:Dry.Framework.IEngineEmail.SendEmail(System.String,System.String,System.String)">
            <summary>Sends an email</summary>
        </member>
        <member name="M:Dry.Framework.IEngineEmail.SendResetPasswordEmail(System.String,System.String,System.String,System.String)">
            <summary>Sends a Password reset email</summary>
        </member>
        <member name="M:Dry.Framework.IEngineEmail.SendVerifyEmail(System.String,System.String,System.String,System.String)">
            <summary>Sends a email verification email</summary>
        </member>
        <member name="M:Dry.Framework.IEngineEmail.SendAdminAnEmail(System.String)">
            <summary>Send Admin an email</summary>
        </member>
        <member name="T:Dry.Framework.IEngineAction">
            <summary>Interface for Engine Action Class</summary>
        </member>
        <member name="E:Dry.Framework.IEngineAction.ActionCompleted">
            <summary>Action Completed</summary>
        </member>
        <member name="E:Dry.Framework.IEngineAction.ActionException">
            <summary>Event fires when any error occures</summary>
        </member>
        <member name="P:Dry.Framework.IEngineAction.Messages">
            <summary>Any messages from the Action are places in this thread safe queue</summary>
        </member>
        <member name="M:Dry.Framework.IEngineAction.Execute(Dry.Framework.IDryDataAccessClass,Dry.Framework.IEngineDictionary,Dry.Framework.IEngineEmail)">
            <summary>Executes the Action. This method will fire EITHER ActionCompleted OR ActionException.  (will always fire one of them)</summary>
            <remarks>NO Error will be throw.  To see any error you must handle the ActionException event.</remarks>
        </member>
        <member name="M:Dry.Framework.IEngineAction.ExecuteAsynchronously(Dry.Framework.IDryDataAccessClass,Dry.Framework.IEngineDictionary,Dry.Framework.IEngineEmail)">
            <summary>Executes the Action. This method will fire EITHER ActionCompleted OR ActionException.  (will always fire one of them)</summary>
            <remarks>NO Error will be throw.  To see any error you must handle the ActionException event.</remarks>
        </member>
        <member name="M:Dry.Framework.IEngineAction.AbortAsynchronous">
            <summary>Attempt to abort the thread</summary>
            <remarks>NO Error will be throw.  To see any error you must handle the ActionException event.</remarks>
        </member>
        <member name="P:Dry.Framework.IEngineAction.Completed">
            <summary>After the Action completes this will be marked as true</summary>
        </member>
        <member name="T:Dry.Framework.IDryStoredProcedureAutomation">
            <summary>Interface for the Stored Procedure Class encapsulated abstract class</summary>
        </member>
        <member name="E:Dry.Framework.IDryStoredProcedureAutomation.ActionPullAsynchronousCompleted">
            <summary>Event fires when the ExecuteAsynchronously method completes the task in the backgrouund thread</summary>
        </member>
        <member name="E:Dry.Framework.IDryStoredProcedureAutomation.ActionPullAsynchronousException">
            <summary>Event fires when any error occures in ExecuteAsynchronously's background thread</summary>
        </member>
        <member name="M:Dry.Framework.IDryStoredProcedureAutomation.Execute">
            <summary>Executes the Stored Procedure using all parameters and returning the dataset</summary>
        </member>
        <member name="M:Dry.Framework.IDryStoredProcedureAutomation.ExecuteAsynchronously">
            <summary>Executes the Stored Procedure using all parameters in a background thread. this method will fire EITHER ActionPullAsynchronousCompleted OR ActionPullAsynchronousException.  (will always fire one of them)</summary>
        </member>
        <member name="M:Dry.Framework.IDryStoredProcedureAutomation.AbortAsynchronous">
            <summary>Attempt to abort the thread</summary>
        </member>
        <member name="P:Dry.Framework.IDryStoredProcedureAutomation.Completed">
            <summary>After the thread completes this will be marked as true</summary>
        </member>
        <member name="P:Dry.Framework.IDryStoredProcedureAutomation.DatabaseObjectName">
            <summary>Name of the Stored Procedure in the database</summary>
        </member>
        <member name="P:Dry.Framework.IDryStoredProcedureAutomation.GetParmameters">
            <summary>Converts all the properties (procedure parameters) into a generic list of ProcParam's</summary>
        </member>
        <member name="M:Dry.Framework.IDryStoredProcedureAutomation.PropertyAttributes">
            <summary>Gets a gemeric list of the column attributes</summary>
        </member>
        <member name="T:Dry.Framework.IDryTableModelAutomation">
            <summary>Interface for the Table Model Classes</summary>
        </member>
        <member name="M:Dry.Framework.IDryTableModelAutomation.PropertyAttributes">
            <summary>Gets a gemeric list of the column attributes</summary>
        </member>
        <member name="T:Dry.Framework.IDryDataAccessClass">
            <summary>
            This Interface is For a Data Access Class
            </summary>
        </member>
        <member name="P:Dry.Framework.IDryDataAccessClass.ServerName">
            <summary>Name of the Server connected to</summary>
        </member>
        <member name="P:Dry.Framework.IDryDataAccessClass.ServerCatalog">
            <summary>Name of the Database connected to</summary>
        </member>
        <member name="P:Dry.Framework.IDryDataAccessClass.ServerUser">
            <summary>User name if not trusted</summary>
        </member>
        <member name="P:Dry.Framework.IDryDataAccessClass.ServerPassword">
            <summary>Password if not trusted</summary>
        </member>
        <member name="P:Dry.Framework.IDryDataAccessClass.ConnectionStatus">
            <summary>Gets the State of the connection object</summary>
        </member>
        <member name="P:Dry.Framework.IDryDataAccessClass.ConnectionTimeout">
            <summary>Gets the Timeout the commection object is set to</summary>
        </member>
        <member name="P:Dry.Framework.IDryDataAccessClass.ConnectionString">
            <summary>Gets or sets the connection string</summary>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.ConnectionOpen">
            <summary>Opens the connection</summary>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.ConnectionClose">
            <summary>Closes the connection</summary>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.RetrieveDS(System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>Gets a DataSet from the database server based on the SQL statement passed in</summary>
            <param name="strSQLStatement">SQL Statement to execute</param>
            <param name="ynQuietOperation">Supress Errors</param>
            <param name="intTimeout">Optional, override the value that specifies how long SQL Server waits for a change to occur before the operation times out.</param>
            <param name="ynAddSchema">When using AddSchema, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user should be aware of potential side effects,</param>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.RetrieveDT(System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>Gets a DataTable from the database server based on the SQL statement passed in</summary>
            <param name="strSQLStatement">SQL Statement to execute</param>
            <param name="ynQuietOperation">Supress Errors</param>
            <param name="intTimeout">Optional, override the value that specifies how long SQL Server waits for a change to occur before the operation times out.</param>
            <param name="ynAddSchema">When using AddSchema, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user should be aware of potential side effects,</param>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.RetrieveTop1DR(System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>Gets the first row from the database server based on the SQL statement passed in</summary>
            <param name="strSQLStatement">SQL Statement to execute</param>
            <param name="ynQuietOperation">Supress Errors</param>
            <param name="intTimeout">Optional, override the value that specifies how long SQL Server waits for a change to occur before the operation times out.</param>
            <param name="ynAddSchema">When using AddSchema, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user should be aware of potential side effects,</param>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.RetrieveDT(Dry.Framework.Options.RetrieveDTOptions,System.Boolean)">
            <summary>Gets a DataTable from the database server based on the SQL statement passed in</summary>
            <param name="pOptions">Execution Options</param>
            <param name="ynQuietOperation">Supress Errors</param>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.ExecuteSQL(System.String,System.Boolean,System.Int32)">
            <summary>Executes a SQL statement on the database server expecting no return</summary>
            <param name="strSQLStatement">SQL Statement to execute</param>
            <param name="ynQuietOperation">Supress Errors</param>
            <param name="intTimeout">Optional, override the value that specifies how long SQL Server waits for a change to occur before the operation times out.</param>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.ExecuteStoredProcedure(System.String,System.Collections.Generic.List{Dry.Framework.DAL.ProcParam},System.Boolean)">
            <summary>Executes a Stored Procedure</summary>
            <param name="strStoredProcName">Name of the Stored procedure in the database</param>
            <param name="pglParameters">List of Porcedure Parameters and the values to set them to</param>
            <param name="ynQuietOperation">Error Suppression</param>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.ExecuteStoredProcedure(Dry.Framework.IDryStoredProcedureAutomation)">
            <summary>Executes a Stored Procedure on the Database server</summary>
            <param name="spaClassItem">Procedure abstract class</param>
            <returns>Returns whatever the stored procedure returns in the form of a dataset</returns>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.GetOneFieldValue(System.String,System.DateTime,System.Boolean,System.Int32)">
            <summary>Executes a SQL Statement and returns a single value</summary>
            <param name="strSQLStatement">SQL statement to execute</param>
            <param name="dtmDefaultValue">Default Value if Nothing (null) is returned</param>
            <param name="ynQuietOperation">Supress Errors</param>
            <param name="intTimeout">Optional, override the value that specifies how long SQL Server waits for a change to occur before the operation times out.</param>
            <example>Example: SELECT COUNT(*) AS intCount FROM TableName</example>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.GetOneFieldValue(System.String,System.Int32,System.Boolean,System.Int32)">
            <summary>Executes a SQL Statement and returns a single value</summary>
            <param name="strSQLStatement">SQL statement to execute</param>
            <param name="intDefaultValue">Default Value if Nothing (null) is returned</param>
            <param name="ynQuietOperation">Supress Errors</param>
            <param name="intTimeout">Optional, override the value that specifies how long SQL Server waits for a change to occur before the operation times out.</param>
            <example>Example: SELECT COUNT(*) AS intCount FROM TableName</example>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.GetOneFieldValue(System.String,System.String,System.Boolean,System.Int32)">
            <summary>Executes a SQL Statement and returns a single value</summary>
            <param name="strSQLStatement">SQL statement to execute</param>
            <param name="strDefaultValue">Default Value if Nothing (null) is returned</param>
            <param name="ynQuietOperation">Supress Errors</param>
            <param name="intTimeout">Optional, override the value that specifies how long SQL Server waits for a change to occur before the operation times out.</param>
            <example>Example: SELECT COUNT(*) AS intCount FROM TableName</example>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.GetOneFieldValue(System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>Executes a SQL Statement and returns a single value</summary>
            <param name="strSQLStatement">SQL statement to execute</param>
            <param name="ynDefaultValue">Default Value if Nothing (null) is returned</param>
            <param name="ynQuietOperation">Supress Errors</param>
            <param name="intTimeout">Optional, override the value that specifies how long SQL Server waits for a change to occur before the operation times out.</param>
            <example>Example: SELECT COUNT(*) AS intCount FROM TableName</example>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.GetOneFieldValue(System.String,System.Boolean,System.Int32)">
            <summary>Executes a SQL Statement and returns a single value</summary>
            <param name="strSQLStatement">SQL statement to execute</param>
            <param name="ynQuietOperation">Supress Errors</param>
            <param name="intTimeout">Optional, override the value that specifies how long SQL Server waits for a change to occur before the operation times out.</param>
            <example>Example: SELECT COUNT(*) AS intCount FROM TableName</example>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.GetProcedureParameters(System.String,System.Boolean)">
            <summary>Gets the Stored Procedure Parameters for the given procedure</summary>
            <param name="strStoredProcName">Name of the Stored procedure</param>
            <param name="ynQuietOperation">Error Suppression</param>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.Info_GetSchema(System.String,System.String[])">
            <summary>Returns schema information for the data source of this System.Data.SqlClient.SqlConnection</summary>
            <param name="strSchema">Specify the name of the schema to return, or Nothing</param>
            <param name="aryRestrictionValues">Optional, Array of Restriction Values or Nothing (null)</param>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.Info_ExistsFunction(System.String,System.Boolean)">
            <summary>Tests for the existance of a function</summary>
            <param name="strFunctionName">Name of function</param>
            <param name="ynQuietOperation">Error Suppression</param>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.Info_ExistsProcedure(System.String,System.Boolean)">
            <summary>Tests for the existance of a Procedure</summary>
            <param name="strProcedureName">Name of procedure</param>
            <param name="ynQuietOperation">Error Suppression</param>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.Info_ExistsTable(System.String,System.Boolean)">
            <summary>Tests for the existance of a Table</summary>
            <param name="strTableName">Name of table</param>
            <param name="ynQuietOperation">Error Suppression</param>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.Info_ExistsView(System.String,System.Boolean)">
            <summary>Tests for the existance of a View</summary>
            <param name="strViewName">Name of View</param>
            <param name="ynQuietOperation">Error Suppression</param>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.Info_GetDatabaseDT(System.Boolean)">
            <summary>Gets a DataTable of the Databases on the server</summary>
            <param name="ynQuietOperation">Error suppression</param>
            <returns>DataTable with the columns: intDBID, strName, strStatus, dtmCreated, intCompatibility, strDataFile, strVersion, strFileSize, strRecovery</returns>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.Info_GetFieldDT(System.String,System.Boolean)">
            <summary>Gets a DataTable containing information about the fields in the table supplied</summary>
            <param name="strTable">name of table to pull fields for</param>
            <param name="ynQuietOperation">Error suppression</param>
            <returns>returns a datatable with the columns: intFID, strName, intLength, ynAutoNumber, ynNullable, ynComputed, strDefaultText, strDataType, strDescription, intPrecision, ynUniqueConstrained</returns>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.Info_GetForeignKeyDT(System.String)">
             <summary>Gets a DataTable with the foreign key links</summary>
             <param name="strTableName">Optional, Name of table to filter on</param>
             <returns>Columns: FK, FC, FKEY, RK, RC, RKEY, CONSTRAINT_NAME, UPDATE_RULE, DELETE_RULE</returns>
             <remarks><code>
            <para>FK.................|.FC...............|.FKEY.|.RK...............|.RC...............|.RKEY.|.CONSTRAINT_NAME..................|.UPDATE_RULE.|.DELETE_RULE</para>
            <para>-------------------+------------------+------+------------------+------------------+------+----------------------------------+-------------+------------</para>
            <para>lnkPharmacyAddress.|.intAddressID.....|.3....|.tblAddress.......|.intAddressID.....|.1....|.FK_lnkPharmacyAddress_tblAddress.|.NO.ACTION...|.NO.ACTION</para>
            <para>tblAddress.........|.intAddressTypeID.|.2....|.tblAddressType...|.intAddressTypeID.|.1....|.FK_tblAddress_tblAddressType.....|.NO.ACTION...|.NO.ACTION</para>
            <para>tblAddress.........|.intRegionID......|.3....|.tblAddressRegion.|.intRegionID......|.1....|.FK_tblAddress_tblRegion..........|.NO.ACTION...|.NO.ACTION</para>
            </code>
            <para>if FK = strTableName then it is a Foreign Key link From FK.FC to RK.RC  (Many to 1) (this table is using RK as a look up table).</para>
            <para>if RK = strTableName then it is a Primary key link From RK.RC to FK.FC  (1 to Many) (this table is a lookup table for RK).</para></remarks>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.Info_GetForeignKeyFixedDT(System.String)">
            <summary>Retrieves Field Information for a Table</summary>
            <param name="strTableName">The name of the Table to retrieve Field Information for</param> 
            <returns>System.Data.DataTable</returns>
            <remarks>
            <example><code>
            <para>Assume strTableName = "tblAddress"</para>
            <para>  AND:</para>
            <para></para>                                                            
            <para>...####################.............########################.</para>
            <para>...#.tblAddress.......#.............#.lnkPharmacyAddress...#.</para>
            <para>...####################.............########################.</para>
            <para>...#*intAddressID.....# 1------\....#*intPharmacyAddressID.#.</para>
            <para>...#.intAddressTypeID # M---\...\...#.intPharmacyID........#.</para>
            <para>...#.intRegionID......# M-\..\...\-M#.intAddressID.........#.</para>
            <para>...#.strAddress.......#...|..|......########################.</para>
            <para>...####################...|..|...............................</para>
            <para>..........................|..|...............................</para>
            <para>..........................|..|..####################.........</para>
            <para>....####################..|..|..#.tblAddressType...#.........</para>
            <para>....#.tblAddressRegion.#..|..|..####################.........</para>
            <para>....####################..|..\-1#*intAddressTypeID.#.........</para>
            <para>....#*intRegionID......#1-/.....#.strName..........#.........</para>
            <para>....# strRegion........#........####################.........</para>
            <para>....####################.....................................</para>
            <para></para>
            <para>Returns:</para>
            <para></para>
            <para>strTable...|.strField.........|.strForeignTable....|.strForeignField..|.strLink</para>
            <para>-----------+------------------+--------------------+------------------+---------</para>
            <para>tblAddress.|.intAddressID.....|.lnkPharmacyAddress.|.intAddressID.....|.ONE</para>
            <para>tblAddress.|.intAddressTypeID.|.tblAddressType.....|.intAddressTypeID.|.MANY</para>
            <para>tblAddress.|.intRegionID......|.tblAddressRegion...|.intRegionID......|.MANY</para>
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.Info_GetServerDateTime">
            <summary>Returns the date and time on the server</summary>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.Info_GetServerProperties(System.Boolean)">
            <summary>Gets a DataTable of the server properties</summary>
            <param name="ynQuietOperation">Error suppression</param>
            <returns>DataTable columns: Property, Value</returns>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.Info_GetServers(System.Boolean)">
            <summary>Get a list of servers</summary>
            <param name="ynQuietOperation">Error suppression</param>
            <returns>columns: ServerName, InstanceName, IsClustered, Version</returns>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.Info_GetServerVersion">
            <summary>Gets the Version of the server.  8 = 2000, 9 = 2005, etc...</summary>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.Info_GetStoredProcedureParamsDT(System.String,System.Boolean)">
             <summary>Returns a table of the parameters for a procedure</summary>
             <param name="strStoredProcName"></param>
             <param name="ynQuietOperation"></param>
             <returns><para>DataTable with columns: intProcedureID, strProcedureName, strParameter, strType, intLength, intParameterDirection, strDefault</para>
            <para>intParameterDirection = 1 = Input</para>
            <para>intParameterDirection = 2 = Output</para>
            </returns>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.Info_GetTablesDT(System.Boolean,System.Boolean,System.Char,System.Boolean)">
            <summary>Gets a DataTable of Object names</summary>
            <param name="ynQuietOperation">Swallow errors</param>
            <param name="ynNameOnly">Return a DT with strName column only</param>
            <param name="chrUVPST">U for table, V for View, P for procedure, F for function, T for trigger, S for synonym.  pass X for all</param>
            <param name="ynHideSysObjects">Hide the known system objects.  Like sysdiagrams</param>
            <returns>intTBID, strName, strType, dtmEdited, dtmCreated</returns>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.Info_GetUniqueKeyConstraintsDT(System.String)">
            <summary>Gets the Unique Constraints for a given table or database</summary>
            <param name="strTableName">Name of table to filter or String.Empty for all</param>
            <returns>Columns: strUniqueConstraint, strDatabase, strSchema, strTable, strColumn</returns>
            <remarks>NOTE: multiple column unique constraints will have more than 1 row</remarks>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.Info_GetUsers(System.Boolean)">
            <summary>Gets all the users connected to the database</summary>
            <param name="ynQuietOperation">Error suppression</param>
            <returns>Columns: ComputerName, [CPU Time], [Input/Output], [Memory], [Application], [Action]</returns>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.Info_GetFragmentation(System.Int32,System.Boolean)">
            <summary>Gets the Index Fragmentaton and builds the Defragging statement</summary>
            <param name="intMinimumFragmentation">0 to 100 as Percent of fragmentation.</param>
            <param name="ynQuietOperation">Error suppresion</param>
            <returns>DataTable with columns: intObjectID, strObjectName, strIndexName, curPercentFragmented, intPages, intFragments, strIndexType, strRebuildSQL</returns>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.Info_GetServerInfoBlock(System.Boolean)">
            <summary>Get the Super duper system information block</summary>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.Info_ObjectType(System.String,System.Boolean)">
            <summary>Gets the type of a database object</summary>
            <param name="strObjectName">Name of object in database.  Supports objects that are in the enumeration DatabaseObjectType</param>
            <param name="ynQuietOperation">Error suppression</param>
            <returns>DatabaseObjectType Value</returns>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.NewClone">
            <summary>Instiantiates a new DAC from the connectionstring.  Usefull in threading.</summary>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.TransactionBegin">
            <summary>Begins a Transaction.</summary>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.TransactionCommit">
            <summary>Commits a Transaction.</summary>
        </member>
        <member name="M:Dry.Framework.IDryDataAccessClass.TransactionRollBack">
            <summary>Rolls Back a Transaction.</summary>
        </member>
        <member name="P:Dry.Framework.IDryDataAccessClass.LastError">
            <summary>Last Error that occured.</summary>
        </member>
        <member name="P:Dry.Framework.IDryDataAccessClass.TransactionState">
            <summary>Current Transactional State.</summary>
        </member>
        <member name="T:Dry.Framework.IRun">
            <summary>Run</summary>
        </member>
        <member name="M:Dry.Framework.IRun.Run">
            <summary>Run</summary>
        </member>
        <member name="T:Dry.Framework.IAmADBObjectType">
            <summary>Database object.  Table, View, Function, Procedure, etc...</summary>
        </member>
        <member name="P:Dry.Framework.IAmADBObjectType.DBName">
            <summary>Name of database object</summary>
        </member>
        <member name="P:Dry.Framework.IAmADBObjectType.ObjectID">
            <summary>ID in database</summary>
        </member>
        <member name="P:Dry.Framework.IAmADBObjectType.ObjectType">
            <summary>Type of object. Table, Function, View, Procedure, etc...</summary>
        </member>
        <member name="P:Dry.Framework.IAmADBObjectType.OverrideName">
            <summary>Optional name of Model to override automatic nameing from the base object</summary>
        </member>
        <member name="P:Dry.Framework.IAmADBObjectType.UpdatedOn">
            <summary>Date last updated</summary>
        </member>
        <member name="P:Dry.Framework.IAmADBObjectType.CreatedOn">
            <summary>Date Of Creation</summary>
        </member>
        <member name="P:Dry.Framework.IAmADBObjectType.DBFields">
            <summary>List of the Fields or parameters of the database object</summary>
        </member>
        <member name="M:Dry.Framework.IAmADBObjectType.GetFieldNamesDotNetParameters">
            <summary>Returns all of the Field names seperated by comma. ex: int TableId, string ColumnOne, datetime ColumnTwo</summary>
        </member>
        <member name="M:Dry.Framework.IAmADBObjectType.GetFieldNamesCommaSeperated">
            <summary>Returns all of the Field names seperated by comma. ex: TableId, ColumnOne, ColumnTwo</summary>
        </member>
        <member name="T:Dry.Framework.IAmADBFieldType">
            <summary>GField or GParameter class</summary>
        </member>
        <member name="P:Dry.Framework.IAmADBFieldType.DBID">
            <summary>ID in database</summary>
        </member>
        <member name="P:Dry.Framework.IAmADBFieldType.DBName">
            <summary>Name of field or parameter</summary>
        </member>
        <member name="P:Dry.Framework.IAmADBFieldType.Length">
            <summary>Max Length</summary>
        </member>
        <member name="P:Dry.Framework.IAmADBFieldType.DataType">
            <summary>SQL datatype. varchar, int, datetime, etc...</summary>
        </member>
        <member name="P:Dry.Framework.IAmADBFieldType.DefaultText">
            <summary>Default text</summary>
        </member>
        <member name="M:Dry.Framework.IAmADBFieldType.ToSQLDeclareType">
            <summary>Returns the declaration data type for the column/parameter</summary>
        </member>
        <member name="M:Dry.Framework.IAmADBFieldType.ToSQLInfo">
            <summary>Returns the information line for the column/parameter</summary>
        </member>
        <member name="M:Dry.Framework.IAmADBFieldType.IsLongTextField">
            <summary>Is this a long text field (over 200 in length)</summary>
        </member>
        <member name="T:Dry.Framework.IDryViewable">
            <summary>The basic Dont repeat yourself simple object</summary>
        </member>
        <member name="M:Dry.Framework.IDryViewable.ToString">
            <summary>String representative of the object</summary>
        </member>
        <member name="M:Dry.Framework.IDryViewable.ToPrimaryKey">
            <summary>the Primary key of the item</summary>
        </member>
        <member name="M:Dry.Framework.IDryViewable.ToFindField">
            <summary>the unique field or fields other than the primary key</summary>
        </member>
        <member name="T:Dry.Framework.ProcedureModel">
            <summary>The Stored Procedure model class</summary>
        </member>
        <member name="E:Dry.Framework.ProcedureModel.ActionPullAsynchronousCompleted">
            <summary>Records were found (Used in the Asynchronous method only)</summary>
        </member>
        <member name="E:Dry.Framework.ProcedureModel.ActionPullAsynchronousException">
            <summary>An Error has occured (Used in the Asynchronous method only)</summary>
        </member>
        <member name="P:Dry.Framework.ProcedureModel.DatabaseObjectName">
            <summary>Name of Database object</summary>    
        </member>
        <member name="F:Dry.Framework.ProcedureModel.pDB">
            <summary>Data Access Class</summary>
        </member>
        <member name="F:Dry.Framework.ProcedureModel.CRLF">
            <summary>Carriage Return Line Feed</summary>
        </member>
        <member name="F:Dry.Framework.ProcedureModel.mintTimeOut">
            <summary>Time out Setting</summary>
        </member>
        <member name="P:Dry.Framework.ProcedureModel.GetParmameters">
            <summary>Gets a list of the parameters</summary>
        </member>
        <member name="M:Dry.Framework.ProcedureModel.Execute">
            <summary>Executes the Stored Procedure DeleteAttachment</summary>
            <exception cref="T:System.Data.DataException">Thrown on any error</exception>
            <example><code>
             prcDeleteAttachment spp = new DeleteAttachment((IDryDataAccessClass)OpenedInstanceOfDAC)
             prcDeleteAttachment.ParamETC = YouGetTheIdea
             DataSet ds = prcDeleteAttachment.Execute()
            </code></example>
        </member>
        <member name="M:Dry.Framework.ProcedureModel.ExecuteAsynchronously">
            <summary>Execute Stored Procedure in the Background</summary>
            <example><code>
            private void ButtonExecute_Click(object sender, EventArgs e) {
             prcDeleteAttachment spp = new prcDeleteAttachment((IDryDataAccessClass)OpenedInstanceOfDAC)
             prcDeleteAttachment.ParamOne = ValueToPassProc
             prcDeleteAttachment.ParamETC = YouGetTheIdea
             
             prcDeleteAttachment.ActionPullAsynchronousCompleted += OnRecordsFound
             prcDeleteAttachment.ActionPullAsynchronousException += OnInternalError
             prcDeleteAttachment.ExecuteAsynchronously()
             }
             private void OnRecordsFound(object sender, Dry.Framework.EventArguments.RecordsFoundEventArgs e) { // Handle The Completion, E has the DataSet }
             private void OnInternalError(object sender, Dry.Framework.EventArguments.InternalErrorEventArgs e) { // Handle The Failure, E has the Error }
            </code></example>
        </member>
        <member name="P:Dry.Framework.ProcedureModel.Completed">
            <summary>Value is true when the Asynchronous Execution has completed</summary>
        </member>
        <member name="M:Dry.Framework.ProcedureModel.AbortAsynchronous">
            <summary>If the ExecuteAsynchronously Method was called, This will attempt to Abort the Thread. Microsoft: "Calling this method USUALLY terminates the thread."</summary>
        </member>
        <member name="T:Dry.Framework.Options.RightClickMenuOptions">
            <summary>Right Click Generation Options</summary>
        </member>
        <member name="P:Dry.Framework.Options.RightClickMenuOptions.MenuCommands">
            <summary>List of the Menu Items visible to the user</summary>
        </member>
        <member name="P:Dry.Framework.Options.RightClickMenuOptions.ObjectName">
            <summary>Name of the object to attach the menu to</summary>
        </member>
        <member name="M:Dry.Framework.Options.RightClickMenuOptions.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Dry.Framework.Options.RightClickMenuOptions.#ctor(System.Collections.Generic.List{System.String},System.String)">
            <summary>Constructor</summary>
        </member>
        <member name="T:Dry.Framework.Options.RetrieveDTOptions">
            <summary>
            Retrieve DataTable Options Class (Property Grid Safe)
            </summary>
            <remarks>
            Samples:
            Dim dt As DataTable = xDB.RetrieveDS(New Data.RetrieveDTOptions("SELECT * FROM tblName"))
            Dim dt As DataTable = xDB.RetrieveDS(New Data.RetrieveDTOptions("SELECT * FROM tblName", 200))
            Dim dt As DataTable = xDB.RetrieveDS(New Data.RetrieveDTOptions("EXEC prcSomething;SELECT * FROM tblName", 100, 1))
            Dim dt As DataTable = xDB.RetrieveDS(New Data.RetrieveDTOptions("SELECT * FROM tblName", 30, 0, 1000))
            </remarks>
        </member>
        <member name="M:Dry.Framework.Options.RetrieveDTOptions.#ctor">
            <summary>Default Constructor</summary>
        </member>
        <member name="M:Dry.Framework.Options.RetrieveDTOptions.#ctor(System.String)">
            <summary>New Retrieve DataTable Options</summary>
            <param name="strSQL">The Transaction Structured Query Language Statement.</param>
        </member>
        <member name="M:Dry.Framework.Options.RetrieveDTOptions.#ctor(System.String,System.Int32)">
            <summary>
            New Retrieve DataTable Options
            </summary>
            <param name="strSQL">The Transaction Structured Query Language Statement.</param>
            <param name="intTimeOut">Gets or sets the the time (in seconds) to wait for the command to execute before terminating an attempt to execute a command and generating an error.  The default is 30 seconds.</param>
            <remarks></remarks>
        </member>
        <member name="M:Dry.Framework.Options.RetrieveDTOptions.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            New Retrieve DataTable Options
            </summary>
            <param name="strSQL">The Transaction Structured Query Language Statement.</param>
            <param name="intTimeOut">Gets or sets the the time (in seconds) to wait for the command to execute before terminating an attempt to execute a command and generating an error.  The default is 30 seconds.</param>
            <param name="intTableIndex">The zero-based index of the datatable in the dataset</param>
            <remarks></remarks>
        </member>
        <member name="M:Dry.Framework.Options.RetrieveDTOptions.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            New Retrieve DataTable Options
            </summary>
            <param name="strSQL">The Transaction Structured Query Language Statement.</param>
            <param name="intTimeOut">Gets or sets the the time (in seconds) to wait for the command to execute before terminating an attempt to execute a command and generating an error.  The default is 30 seconds.</param>
            <param name="intTableIndex">The zero-based index of the datatable in the dataset</param>
            <param name="ynAddSchema">Adds Schema Mapping Info the the DataTable</param>
            <remarks></remarks>
        </member>
        <member name="M:Dry.Framework.Options.RetrieveDTOptions.#ctor(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            New Retrieve DataTable Options
            </summary>
            <param name="strSQL">The Transaction Structured Query Language Statement.</param>
            <param name="intTimeOut">Gets or sets the the time (in seconds) to wait for the command to execute before terminating an attempt to execute a command and generating an error.  The default is 30 seconds.</param>
            <param name="intTableIndex">The zero-based index of the datatable in the dataset</param>
            <param name="ynAddSchema">Adds Schema Mapping Info the the DataTable</param>
            <param name="strSourceTable">The name of the source table to use for table mapping.  Defaults to 'Table'</param>
            <remarks></remarks>
        </member>
        <member name="M:Dry.Framework.Options.RetrieveDTOptions.#ctor(System.String,System.Int32,System.Int32,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            New Retrieve DataTable Options
            </summary>
            <param name="strSQL">The Transaction Structured Query Language Statement.</param>
            <param name="intTimeOut">Gets or sets the the time (in seconds) to wait for the command to execute before terminating an attempt to execute a command and generating an error.  The default is 30 seconds.</param>
            <param name="intTableIndex">The zero-based index of the datatable in the dataset</param>
            <param name="ynAddSchema">Adds Schema Mapping Info the the DataTable</param>
            <param name="strSourceTable">The name of the source table to use for table mapping.  Defaults to 'Table'</param>
            <param name="intStartRecord">The zero-based record number to start with.  -1 to disable.</param>
            <param name="intMaxRecords">The maximum number of records to retrieve.  Used with Start Record to limit.  -1 to disable.</param>
            <remarks></remarks>
        </member>
        <member name="M:Dry.Framework.Options.RetrieveDTOptions.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            New Retrieve DataTable Options
            </summary>
            <param name="strSQL">The Transaction Structured Query Language Statement.</param>
            <param name="intTimeOut">Gets or sets the the time (in seconds) to wait for the command to execute before terminating an attempt to execute a command and generating an error.  The default is 30 seconds.</param>
            <param name="intStartRecord">The zero-based record number to start with.  -1 to disable.</param>
            <param name="intMaxRecords">The maximum number of records to retrieve.  Used with Start Record to limit.  -1 to disable.</param>
            <remarks></remarks>
        </member>
        <member name="M:Dry.Framework.Options.RetrieveDTOptions.IsValid">
            <summary>
            Returns True if your setting Values are valid
            </summary>
        </member>
        <member name="M:Dry.Framework.Options.RetrieveDTOptions.ToString">
            <summary>Gets the SQL Statement</summary>
        </member>
        <member name="M:Dry.Framework.Options.RetrieveDTOptions.ToPersistableString">
            <summary>
            Returns all Options in an Encoded String for saving to a file
            </summary>
        </member>
        <member name="M:Dry.Framework.Options.RetrieveDTOptions.FromPersistableString(System.String)">
            <summary>
            Parses a previously Encoded String built using ToPersistableString
            </summary>
            <param name="strPersistableString">a String Encoded by ToPersistableString</param>
            <remarks></remarks>
        </member>
        <member name="P:Dry.Framework.Options.RetrieveDTOptions.SelectCommandText">
            <summary>Transact SQL Statement</summary>
            <value>SQL Statement ex: SELECT * FROM tblNames</value>
        </member>
        <member name="P:Dry.Framework.Options.RetrieveDTOptions.SourceTable">
            <summary>The name of the source table to use for table mapping</summary>
            <value>Sets the DataTable Table Property</value>
        </member>
        <member name="P:Dry.Framework.Options.RetrieveDTOptions.AddSchema">
            <summary>Gets or sets the option to add Schema Information (Column Widths, Unique, Nullable, etc...)</summary>
            <value>True = Add Extra Information. False (default) Skip Missing Information</value>
        </member>
        <member name="P:Dry.Framework.Options.RetrieveDTOptions.TimeOut">
            <summary>Gets or sets the Timeout</summary>
            <value>Time (in seconds) to wait for the command to execute. Default is 30.</value>
        </member>
        <member name="P:Dry.Framework.Options.RetrieveDTOptions.TableIndex">
            <summary>Gets or sets the index of the DataTable in the DataSet</summary>
            <value>The zero-based Table Index. Default is 0.</value>
        </member>
        <member name="P:Dry.Framework.Options.RetrieveDTOptions.StartRecord">
            <summary>Gets or sets the Start Record for use in paging the data</summary>
            <value>Record Number to start with. Default is -1 (disabled).  If StartRecord is set MaxRecords is Required</value>
        </member>
        <member name="P:Dry.Framework.Options.RetrieveDTOptions.MaxRecords">
            <summary>Gets or sets the Max Records.  Only used with StartRecord.</summary>
            <value>Limits the number of records to return. Default is -1 (disabled).</value>
        </member>
        <member name="T:Dry.Framework.Options.CsvTypeConverter">
            <summary>Overrides the ConvertTo method of TypeConverter.</summary>
        </member>
        <member name="M:Dry.Framework.Options.CsvTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Overrides the ConvertTo method of TypeConverter.</summary>
        </member>
        <member name="T:Dry.Framework.Options.HTMLOutputOptions">
            <summary>Options for Exporting HMTL</summary>
        </member>
        <member name="F:Dry.Framework.Options.HTMLOutputOptions.ImageLogo">
            <summary>Optionally add a Company Logo</summary>
        </member>
        <member name="F:Dry.Framework.Options.HTMLOutputOptions.H1Title">
            <summary>Optionally add a Header Line Largets Sized Font</summary>
        </member>
        <member name="F:Dry.Framework.Options.HTMLOutputOptions.H6Title">
            <summary>Optionally add a Sub Header Line Small Sized font. [ex: Strings.DateShortString(DateTime.Now) ]</summary>
        </member>
        <member name="F:Dry.Framework.Options.HTMLOutputOptions.AdditionalHeader">
            <summary>Optionally add Any extra html to be placed in the HEAD section</summary>
        </member>
        <member name="F:Dry.Framework.Options.HTMLOutputOptions.AdditionalFooter">
            <summary>Optionally add Any extra html to be placed before the Last HTML Closing Tag</summary>
        </member>
        <member name="M:Dry.Framework.Options.HTMLOutputOptions.#ctor">
            <summary>Options Class for Exporting HMTL</summary>
        </member>
        <member name="T:Dry.Framework.Options.AlterationResults`1">
            <summary>Generic alteration results</summary>
        </member>
        <member name="F:Dry.Framework.Options.AlterationResults`1.RecordsToInsert">
            <summary>Records need to be Inserted</summary>
        </member>
        <member name="F:Dry.Framework.Options.AlterationResults`1.RecordsToUpdate">
            <summary>Records need to be Updated</summary>
        </member>
        <member name="F:Dry.Framework.Options.AlterationResults`1.RecordsToDelete">
            <summary>Records need to be deleted</summary>
        </member>
        <member name="F:Dry.Framework.Options.AlterationResults`1.RecordsUnchange">
            <summary>Generic alteration results</summary>
        </member>
        <member name="T:Dry.Framework.Options.CachedDoohicKey`1">
            <summary>Caches an object with auto self destruct</summary>
        </member>
        <member name="P:Dry.Framework.Options.CachedDoohicKey`1.Loaded">
            <summary>When Loaded</summary>
        </member>
        <member name="P:Dry.Framework.Options.CachedDoohicKey`1.SecondsToLive">
            <summary>Total Seconds for table to exist (180 = 3 minutes)</summary>
        </member>
        <member name="P:Dry.Framework.Options.CachedDoohicKey`1.SecondsLeft">
            <summary>Seconds left</summary>
        </member>
        <member name="P:Dry.Framework.Options.CachedDoohicKey`1.CachedThing">
            <summary>The Cached table.  Will return default(T) when time expires (SecondsLeft is less than 1)</summary>
        </member>
        <member name="M:Dry.Framework.Options.CachedDoohicKey`1.#ctor">
            <summary>Caches a datatable with auto self destruct</summary>
        </member>
        <member name="T:Dry.Framework.DAL.ProcParam">
             <summary>
             Stored Procedure Parameter Class
             </summary>
            <remarks>
             Using the ProcParam Class You only need to Pass in the
             Stored Parameter Name and Value into the Constructor (and MaxLen for VarChars)
             The method ExecuteStoredProcedure will Create a ParameterObject 
             from each class in the array
            <example>
             <code>
                Dim glParameters As Data.ProcParam()
                Dim dsReturn As DataSet
            
                ReDim glParameters(2) ' Array of Parameters 
                Try
             
                                                         /------------------------ Parameter Name
                                                         |          /------------- Parameter Value Varchar
                                                         |          |   /--------- Varchar Length
                    glParameters(0) = New DAL.ProcParam("@strAction", "A", 1)
             
                                                         /------------------------ Parameter Name
                                                         |      /----------------- Parameter Value Integer,
                                                         |      |   
                    glParameters(1) = New DAL.ProcParam("@lngID", 0I)
             
                                                        /------------------------ Parameter Name
                                                        |         /-------------- Parameter Value Date, ...
                                                        |         |   
                    glParameters(2) = New DAL.ProcParam("@dtmEdited", Now)
            
                    objReturn = xDB.ExecuteStoredProcedure("prcAutoUPDCarrier", glParameters)
            
                Catch ex As Exception
                    Debug.WriteLine("Error: ( prcAutoUPDCarrier ) " + ex.Message.ToString)
                    Throw ex
                Finally
                End Try
             </code>
            </example>
            </remarks>
        </member>
        <member name="F:Dry.Framework.DAL.ProcParam.strParameterName">
            <summary>Name of Parameter</summary>
        </member>
        <member name="F:Dry.Framework.DAL.ProcParam.strDotNetType">
            <summary>Dot Net Type of data</summary>
        </member>
        <member name="F:Dry.Framework.DAL.ProcParam.strSqlType">
            <summary>SQL Server Type of data</summary>
        </member>
        <member name="F:Dry.Framework.DAL.ProcParam.intMaxLength">
            <summary>Maximum length of data</summary>
        </member>
        <member name="F:Dry.Framework.DAL.ProcParam.intPrecision">
            <summary>Precision of data</summary>
        </member>
        <member name="F:Dry.Framework.DAL.ProcParam.ynNullable">
            <summary></summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.Create``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>Create a Proc Param the complicated way</summary>
            <typeparam name="TEntity">Your entity</typeparam>
            <typeparam name="TProperty">Your property</typeparam>
            <param name="prc">Your entity</param>
            <param name="pPropertyGetter">Your lambda</param>
            <returns>a interfaced obfucated object</returns>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.#ctor(System.String,System.Object)">
            <summary>Constructors</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.#ctor(System.String,System.Object,System.Int32)">
            <summary>Constructors</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.#ctor">
            <summary>Constructors</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.#ctor(System.String)">
            <summary>Constructors</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.#ctor(System.String,System.String)">
            <summary>Constructors</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.#ctor(System.String,System.String,System.Object)">
            <summary>Constructors</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.#ctor(System.String,System.String,System.Int32)">
            <summary>Constructors</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.#ctor(System.String,System.DateTime)">
            <summary>Constructors</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.#ctor(System.String,System.Int32)">
            <summary>Constructors</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.#ctor(System.String,System.Int16)">
            <summary>Constructors</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.#ctor(System.String,System.Int64)">
            <summary>Constructors</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.#ctor(System.String,System.Byte)">
            <summary>Constructors</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.#ctor(System.String,System.Single)">
            <summary>Constructors</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.#ctor(System.String,System.Double)">
            <summary>Constructors</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.#ctor(System.String,System.Decimal)">
            <summary>Constructors</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.#ctor(System.String,System.Boolean)">
            <summary>Constructors</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.#ctor(System.String,System.Guid)">
            <summary>Constructors</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.SetValue(System.Object)">
            <summary>Set the value of the parameter</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.SetValue(System.String)">
            <summary>Set the value of the parameter</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.SetValue(System.Int32)">
            <summary>Set the value of the parameter</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.SetValue(System.Int16)">
            <summary>Set the value of the parameter</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.SetValue(System.DateTime)">
            <summary>Set the value of the parameter</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.SetValue(System.Int64)">
            <summary>Set the value of the parameter</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.SetValue(System.Single)">
            <summary>Set the value of the parameter</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.SetValue(System.Double)">
            <summary>Set the value of the parameter</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.SetValue(System.Decimal)">
            <summary>Set the value of the parameter</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.SetValue(System.Boolean)">
            <summary>Set the value of the parameter</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.SetValue(System.Byte)">
            <summary>Set the value of the parameter</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.SetValue(System.Data.DataRow)">
            <summary>Set the value of the parameter</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.ToValue">
            <summary>Pull value</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.ToSQLQuotedValue">
            <summary>Useing the Type to determine if "'s are needed, then wraps or not the value converted to a string</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.ToSQLDeclaration">
            <summary>returns the sql type declaration.  ex: int, varchar(37)</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.ToExecuteString(System.String,System.Collections.Generic.List{Dry.Framework.DAL.ProcParam})">
            <summary>
            Returns a SQL Server Execute Statement from an array of parameters
            </summary>
            <param name="strProcedureName">Name of the Stored Procedure</param>
            <param name="glParameters">Array of Procedure Parameters</param>
            <returns>T-SQL EXECUTE Statement</returns>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.ToExecuteDelcarationString(System.String,System.Collections.Generic.List{Dry.Framework.DAL.ProcParam},System.Boolean)">
            <summary>
            Returns a SQL Server Execute Statement with Declaration from an array of parameters
            </summary>
            <param name="strProcedureName">Name of the Stored Procedure.  ex  dbo.prcWombat</param>
            <param name="glParms">List of Procedure Parameters</param>
            <param name="ynSetOnly">just return the set's</param>
            <returns>T-SQL EXECUTE Statement</returns>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.devPrc(System.Collections.Generic.List{Dry.Framework.DAL.ProcParam},System.String)">
            <summary>Method for debugging Procedure Parameters</summary>
            <param name="aryParms">List of Procedure Parameters</param>
            <param name="strSppName">Name of the Stored Procedure</param>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.ToSQLType">
            <summary>Converts the Dot Net type to a SQLDbType</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.ToSQLParameter">
            <summary>Creates a SqlParameter</summary>
        </member>
        <member name="M:Dry.Framework.DAL.ProcParam.ToString">
            <summary>Information on the object</summary>
        </member>
        <member name="T:Dry.Framework.DAL.Connect4">
            <summary>SQL Server Connection Information Class</summary>
        </member>
        <member name="P:Dry.Framework.DAL.Connect4.ServerName">
            <summary>Name of the server</summary>
        </member>
        <member name="P:Dry.Framework.DAL.Connect4.DatabaseName">
            <summary>Name of the Database</summary>
        </member>
        <member name="P:Dry.Framework.DAL.Connect4.UserName">
            <summary>Optional Username to login with.  Leave blank for Windows authentication</summary>
        </member>
        <member name="P:Dry.Framework.DAL.Connect4.Password">
            <summary>Optional password to login with.  Leave blank for Windows authentication</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Connect4.Serialize">
            <summary>Convert to properties to a single string for saving to file</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Connect4.Deserialize(System.String)">
            <summary>Convert a previously serialized string to properties</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Connect4.Validate">
            <summary>Throws an exception if the connection information is not valid</summary>
            <exception cref="T:System.Data.NoNullAllowedException">Exception thrown if the settings are not valid</exception>
        </member>
        <member name="M:Dry.Framework.DAL.Connect4.HasLoginInformation">
            <summary>Returns true if the Connection contains a username and password</summary>
        </member>
        <member name="T:Dry.Framework.DAL.Database">
            <summary>Data Access Class for SQL Server</summary>
        </member>
        <member name="E:Dry.Framework.DAL.Database.ConnectionInfoMessage">
            <summary>Information</summary>
        </member>
        <member name="E:Dry.Framework.DAL.Database.ConnectionStateChange">
            <summary>Change</summary>
        </member>
        <member name="P:Dry.Framework.DAL.Database.ServerName">
            <summary>Server Name(\Instance)</summary>
        </member>
        <member name="P:Dry.Framework.DAL.Database.ServerCatalog">
            <summary>Database Name</summary>
        </member>
        <member name="P:Dry.Framework.DAL.Database.ServerUser">
            <summary>User Name</summary>
        </member>
        <member name="P:Dry.Framework.DAL.Database.ServerPassword">
            <summary>Password</summary>
        </member>
        <member name="P:Dry.Framework.DAL.Database.ConnectionStatus">
            <summary>Connection Status</summary>
        </member>
        <member name="P:Dry.Framework.DAL.Database.ConnectionTimeout">
            <summary>Timeout</summary>
        </member>
        <member name="P:Dry.Framework.DAL.Database.ConnectionString">
            <summary>Connection String</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.ConnectionOpen">
            <summary>Open sesamie</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.ConnectionClose">
            <summary>Closes the connection</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.RetrieveDS(System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>Retrieve a DataSet</summary>
            <param name="strSQLStatement">SQL Statement to execute</param>
            <param name="ynQuietOperation">Supress Errors?</param>
            <param name="intTimeout">Timeout</param>
            <param name="ynAddSchema">Add DataTable Schema?</param>
        </member>
        <member name="M:Dry.Framework.DAL.Database.RetrieveDT(System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>Retrieve a DataTable</summary>
            <param name="strSQLStatement">SQL Statement to execute</param>
            <param name="ynQuietOperation">Supress Errors?</param>
            <param name="intTimeout">Timeout</param>
            <param name="ynAddSchema">Add DataTable Schema?</param>
        </member>
        <member name="M:Dry.Framework.DAL.Database.RetrieveTop1DR(System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>Retrieve the First data row</summary>
            <param name="strSQLStatement">SQL Statement to execute</param>
            <param name="ynQuietOperation">Supress Errors?</param>
            <param name="intTimeout">Timeout</param>
            <param name="ynAddSchema">Add DataTable Schema?</param>
        </member>
        <member name="M:Dry.Framework.DAL.Database.RetrieveDT(Dry.Framework.Options.RetrieveDTOptions,System.Boolean)">
            <summary>Retrieve a DataTable</summary>
            <param name="pOptions">Options class</param>
            <param name="ynQuietOperation">Supress errors?</param>
        </member>
        <member name="M:Dry.Framework.DAL.Database.ExecuteSQL(System.String,System.Boolean,System.Int32)">
            <summary>Execute some SQL</summary>
            <param name="strSQLStatement">SQL Statement to execute</param>
            <param name="ynQuietOperation">Supress Errors?</param>
            <param name="intTimeout">Timeout</param>
        </member>
        <member name="M:Dry.Framework.DAL.Database.ExecuteStoredProcedure(System.String,System.Collections.Generic.List{Dry.Framework.DAL.ProcParam},System.Boolean)">
            <summary>Execute a Stored Procedure by name and list of parameters</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.ExecuteStoredProcedure(Dry.Framework.IDryStoredProcedureAutomation)">
            <summary>Execute a Stored Procedure by SPP object</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.GetOneFieldValue(System.String,System.DateTime,System.Boolean,System.Int32)">
            <summary>Get one field value</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.GetOneFieldValue(System.String,System.Int32,System.Boolean,System.Int32)">
            <summary>Get one field value</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.GetOneFieldValue(System.String,System.String,System.Boolean,System.Int32)">
            <summary>Get one field value</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.GetOneFieldValue(System.String,System.Guid,System.Boolean,System.Int32)">
            <summary>Get one field value</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.GetOneFieldValue(System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>Get one field value</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.GetOneFieldValue(System.String,System.Boolean,System.Int32)">
            <summary>Get one field value</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.GetProcedureParameters(System.String,System.Boolean)">
            <summary>Get parameters for a procedure</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.Info_GetSchema(System.String,System.String[])">
            <summary>Get Schema</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.Info_ExistsFunction(System.String,System.Boolean)">
            <summary>Does Function exist</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.Info_ExistsProcedure(System.String,System.Boolean)">
            <summary>Does Procedurew exist</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.Info_ExistsTable(System.String,System.Boolean)">
            <summary>Does Table exist</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.Info_ExistsView(System.String,System.Boolean)">
            <summary>Does View exist</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.Info_GetDatabaseDT(System.Boolean)">
            <summary>Gets a DataTable of the Databases on the server</summary>
            <param name="ynQuietOperation">Error suppression</param>
            <returns>DataTable with the columns: intDBID, strName, strStatus, dtmCreated, intCompatibility, strDataFile, strVersion, strFileSize, strRecovery</returns>
        </member>
        <member name="M:Dry.Framework.DAL.Database.Info_GetFieldDT(System.String,System.Boolean)">
            <summary>Gets a DataTable containing information about the fields in the table supplied</summary>
            <param name="strTable">name of table to pull fields for</param>
            <param name="ynQuietOperation">Error suppression</param>
            <returns>returns a datatable with the columns: intFID, strName, intLength, ynAutoNumber, ynNullable, ynComputed, strDefaultText, strDataType, strDescription, intPrecision, ynUniqueConstrained, strParentName</returns>
        </member>
        <member name="M:Dry.Framework.DAL.Database.Info_GetForeignKeyDT(System.String)">
            <summary>Get a DataTable of the Foreign keys for a given table</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.Info_GetForeignKeyFixedDT(System.String)">
            <summary>Get a Cleaner DataTable of the Foreign keys for a given table</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.Info_GetServerDateTime">
            <summary>Gets the Date and time on the server</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.Info_GetServerProperties(System.Boolean)">
            <summary>Gets a DataTable of the server properties</summary>
            <param name="ynQuietOperation">Error suppression</param>
            <returns>DataTable columns: Property, Value</returns>
        </member>
        <member name="M:Dry.Framework.DAL.Database.Info_GetServers(System.Boolean)">
            <summary>Get a list of servers</summary>
            <param name="ynQuietOperation">Error suppression</param>
            <returns>columns: ServerName, InstanceName, IsClustered, Version</returns>
        </member>
        <member name="M:Dry.Framework.DAL.Database.Info_GetServerVersion">
            <summary>Returns the SQL Server version. 8 = SQL Server 2000, 9 = SQL Server 2005, 10 = SQL Server 2008 (R2), 11 = SQL Server 2012, 12 = SQL Server 2014</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.Info_GetStoredProcedureParamsDT(System.String,System.Boolean)">
             <summary>Returns a table of the parameters for a procedure</summary>
             <param name="strStoredProcName"></param>
             <param name="ynQuietOperation"></param>
             <returns><para>DataTable with columns: intProcedureID, strProcedureName, strParameter, strType, intLength, intParameterDirection, strDefault</para>
            <para>intParameterDirection = 1 = Input</para>
            <para>intParameterDirection = 2 = Output</para>
            </returns>
        </member>
        <member name="M:Dry.Framework.DAL.Database.Info_GetTablesDT(System.Boolean,System.Boolean,System.Char,System.Boolean)">
            <summary>Gets a DataTable of Object names</summary>
            <param name="ynQuietOperation">Swallow errors</param>
            <param name="ynNameOnly">Return a DT with strName column only</param>
            <param name="chrUVPST">U for table, V for View, P for procedure, F for function, T for trigger, S for synonym.  pass X for all</param>
            <param name="ynHideSysObjects">Hide the known system objects.  Like sysdiagrams</param>
            <returns>intTBID, strName, strType, dtmEdited, dtmCreated</returns>
        </member>
        <member name="M:Dry.Framework.DAL.Database.Info_GetUniqueKeyConstraintsDT(System.String)">
            <summary>Gets the Unique Constraints for a given table or database</summary>
            <param name="strTableName">Name of table to filter or String.Empty for all</param>
            <returns>Columns: strUniqueConstraint, strDatabase, strSchema, strTable, strColumn</returns>
            <remarks>NOTE: multiple column unique constraints will have more than 1 row</remarks>
        </member>
        <member name="M:Dry.Framework.DAL.Database.Info_GetUsers(System.Boolean)">
            <summary>Gets all the users connected to the database</summary>
            <param name="ynQuietOperation">Error suppression</param>
            <returns>Columns: ComputerName, [CPU Time], [Input/Output], [Memory], [Application], [Action]</returns>
        </member>
        <member name="M:Dry.Framework.DAL.Database.Info_GetFragmentation(System.Int32,System.Boolean)">
            <summary>Gets the Index Fragmentaton and builds the Defragging statement</summary>
            <param name="intMinimumFragmentation">0 to 100 as Percent of fragmentation.</param>
            <param name="ynQuietOperation">Error suppresion</param>
            <returns>DataTable with columns: intObjectID, strObjectName, strIndexName, curPercentFragmented, intPages, intFragments, strIndexType, strRebuildSQL</returns>
        </member>
        <member name="M:Dry.Framework.DAL.Database.Info_GetServerInfoBlock(System.Boolean)">
            <summary>Gets the Server Information block for monitoring CPU, RAM, HDD and Blocks</summary>
            <param name="ynQuietOperation">Error Suppression</param>
            <returns>DataTable columns: intOrder, strA, strB</returns>
        </member>
        <member name="M:Dry.Framework.DAL.Database.Info_ObjectType(System.String,System.Boolean)">
            <summary>Gets the type of a database object</summary>
            <param name="strObjectName">Name of object in database.  Supports objects that are in the enumeration DatabaseObjectType</param>
            <param name="ynQuietOperation">Error suppression</param>
            <returns>DatabaseObjectType Value</returns>
        </member>
        <member name="M:Dry.Framework.DAL.Database.NewClone">
            <summary>Instiantiates a new DAC from the connectionstring.  Usefull in threading.</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.TransactionBegin">
            <summary>Begins a Transaction.</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.TransactionCommit">
            <summary>Commits a Transaction.</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.TransactionRollBack">
            <summary>Rolls Back a Transaction.</summary>
        </member>
        <member name="P:Dry.Framework.DAL.Database.TransactionState">
            <summary>Current Transactional State.</summary>
        </member>
        <member name="P:Dry.Framework.DAL.Database.LastError">
            <summary>Last Error that occured.</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.#ctor(System.String)">
            <summary>Constructor for a SQL Server connection string.</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.#ctor(System.String,System.String)">
            <summary>Constructor for Server name(\instance) and Database name with windows authentication.</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Constructor for Server name(\instance) and Database name with sql login.</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.#ctor(Dry.Framework.DAL.Connect4)">
            <summary>Constructor for Server name(\instance) and Database name with sql login.</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.ToString">
            <summary>Returns the Server and database and the parenthesised connection string.</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.ToString(System.Int32)">
            <summary>Returns the Server and database and the parenthesised connection string. non zero makes multiline</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.ToInterface">
            <summary>Converts sef to the interface for you</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.Dispose(System.Boolean)">
            <summary>IDisposable</summary> 
        </member>
        <member name="M:Dry.Framework.DAL.Database.Dispose">
            <summary>Dispose</summary>
        </member>
        <member name="M:Dry.Framework.DAL.Database.devReturnDTString(System.String,System.Int32)">
            <summary>Developer Method</summary>
            <param name="strSQL">SQL to execute</param>
            <param name="intMaxRows">Max Rows to return</param>
            <returns>Returns the datatable converted to a string</returns>
        </member>
        <member name="M:Dry.Framework.DAL.Database.devReturnDTString(System.Data.DataTable,System.Int32)">
            <summary>Developer Method</summary>
            <param name="dt">DataTable full of data</param>
            <param name="intMaxRows">Max Rows to return in the string</param>
            <returns>Returns the datatable converted to a string</returns>
        </member>
    </members>
</doc>
